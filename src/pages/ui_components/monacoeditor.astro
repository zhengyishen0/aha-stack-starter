---
import Layout from '../../layouts/Layout.astro';
import Card from '../../components/pine/Card.astro';
import Button from '../../components/pine/Button.astro';
import Badge from '../../components/pine/Badge.astro';
import MonacoEditor from '../../components/pine/MonacoEditor.astro';

// Sample code examples
const typescriptCode = `// TypeScript Example with advanced features
interface User {
  id: number;
  name: string;
  email: string;
  roles: string[];
}

class UserService {
  private users: User[] = [];

  addUser(user: User): void {
    this.users.push(user);
  }

  getUserById(id: number): User | undefined {
    return this.users.find(user => user.id === id);
  }

  async fetchUser(id: number): Promise<User> {
    const response = await fetch(\`/api/users/\${id}\`);
    return response.json();
  }
}

const userService = new UserService();
console.log('User service initialized');`;

const pythonCode = `# Python Example with type hints and async
from typing import List, Optional
import asyncio
import json

class User:
    def __init__(self, id: int, name: str, email: str):
        self.id = id
        self.name = name
        self.email = email
    
    def to_dict(self) -> dict:
        return {
            'id': self.id,
            'name': self.name,
            'email': self.email
        }

class UserService:
    def __init__(self):
        self.users: List[User] = []
    
    def add_user(self, user: User) -> None:
        self.users.append(user)
    
    def get_user_by_id(self, user_id: int) -> Optional[User]:
        return next((user for user in self.users if user.id == user_id), None)
    
    async def fetch_user_async(self, user_id: int) -> dict:
        # Simulate async API call
        await asyncio.sleep(0.1)
        user = self.get_user_by_id(user_id)
        return user.to_dict() if user else {}

# Usage example
async def main():
    service = UserService()
    user = User(1, "John Doe", "john@example.com")
    service.add_user(user)
    
    result = await service.fetch_user_async(1)
    print(json.dumps(result, indent=2))

if __name__ == "__main__":
    asyncio.run(main())`;

const htmlCode = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modern Web App</title>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }
        .card {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="card">
            <h1>Welcome to Our App</h1>
            <p>This is a modern web application built with semantic HTML5.</p>
            <button onclick="showMessage()">Click Me</button>
        </div>
    </div>
    
    <script>
        function showMessage() {
            alert('Hello from Monaco Editor!');
        }
    </script>
</body>
</html>`;

const cssCode = `/* Modern CSS with Grid and Flexbox */
:root {
  --primary-color: #3b82f6;
  --secondary-color: #8b5cf6;
  --text-color: #1f2937;
  --bg-color: #f9fafb;
  --border-radius: 0.75rem;
  --shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
  color: var(--text-color);
  background-color: var(--bg-color);
  line-height: 1.6;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem;
  display: grid;
  gap: 2rem;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
}

.card {
  background: white;
  border-radius: var(--border-radius);
  padding: 2rem;
  box-shadow: var(--shadow);
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.card:hover {
  transform: translateY(-4px);
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.15);
}

.btn {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem 1.5rem;
  background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
  color: white;
  border: none;
  border-radius: var(--border-radius);
  cursor: pointer;
  transition: all 0.2s ease;
}

.btn:hover {
  transform: scale(1.05);
  filter: brightness(1.1);
}

@media (max-width: 768px) {
  .container {
    grid-template-columns: 1fr;
    padding: 1rem;
  }
}`;

const jsonCode = `{
  "name": "modern-web-app",
  "version": "1.0.0",
  "description": "A modern web application with Monaco Editor integration",
  "main": "index.js",
  "scripts": {
    "dev": "astro dev",
    "build": "astro build",
    "preview": "astro preview",
    "test": "vitest",
    "lint": "eslint src/",
    "format": "prettier --write src/"
  },
  "dependencies": {
    "astro": "^4.0.0",
    "alpinejs": "^3.13.0",
    "@alpinejs/focus": "^3.13.0",
    "tailwindcss": "^3.3.0",
    "monaco-editor": "^0.44.0"
  },
  "devDependencies": {
    "@types/node": "^20.0.0",
    "typescript": "^5.0.0",
    "eslint": "^8.0.0",
    "prettier": "^3.0.0",
    "vitest": "^1.0.0"
  },
  "keywords": [
    "astro",
    "monaco-editor",
    "typescript",
    "alpine",
    "tailwind"
  ],
  "author": "Pine UI",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/example/modern-web-app.git"
  },
  "bugs": {
    "url": "https://github.com/example/modern-web-app/issues"
  },
  "homepage": "https://modern-web-app.example.com"
}`;

const yamlCode = `# Kubernetes Deployment Configuration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: monaco-editor-demo
  labels:
    app: monaco-editor
spec:
  replicas: 3
  selector:
    matchLabels:
      app: monaco-editor
  template:
    metadata:
      labels:
        app: monaco-editor
    spec:
      containers:
      - name: monaco-editor
        image: nginx:alpine
        ports:
        - containerPort: 80
        env:
        - name: NODE_ENV
          value: "production"
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
          requests:
            memory: "64Mi"
            cpu: "250m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10`;

const rustCode = `// Rust example with modern syntax
use std::collections::HashMap;
use tokio::time::{sleep, Duration};

#[derive(Debug, Clone)]
struct User {
    id: u64,
    name: String,
    email: String,
}

impl User {
    fn new(id: u64, name: String, email: String) -> Self {
        Self { id, name, email }
    }
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let mut users: HashMap<u64, User> = HashMap::new();
    
    let user = User::new(1, "John Doe".to_string(), "john@example.com".to_string());
    users.insert(user.id, user);
    
    // Simulate async operation
    sleep(Duration::from_millis(100)).await;
    
    if let Some(user) = users.get(&1) {
        println!("Found user: {:?}", user);
    }
    
    Ok(())
}`;

const goCode = `// Go example with interfaces and goroutines
package main

import (
    "context"
    "fmt"
    "sync"
    "time"
)

type User struct {
    ID    int64  \`json:"id"\`
    Name  string \`json:"name"\`
    Email string \`json:"email"\`
}

type UserService interface {
    GetUser(ctx context.Context, id int64) (*User, error)
    CreateUser(ctx context.Context, user *User) error
}

type userService struct {
    users map[int64]*User
    mu    sync.RWMutex
}

func NewUserService() UserService {
    return &userService{
        users: make(map[int64]*User),
    }
}

func (s *userService) GetUser(ctx context.Context, id int64) (*User, error) {
    s.mu.RLock()
    defer s.mu.RUnlock()
    
    user, exists := s.users[id]
    if !exists {
        return nil, fmt.Errorf("user not found")
    }
    return user, nil
}

func (s *userService) CreateUser(ctx context.Context, user *User) error {
    s.mu.Lock()
    defer s.mu.Unlock()
    
    s.users[user.ID] = user
    return nil
}

func main() {
    ctx := context.Background()
    service := NewUserService()
    
    user := &User{
        ID:    1,
        Name:  "John Doe",
        Email: "john@example.com",
    }
    
    if err := service.CreateUser(ctx, user); err != nil {
        panic(err)
    }
    
    retrievedUser, err := service.GetUser(ctx, 1)
    if err != nil {
        panic(err)
    }
    
    fmt.Printf("Retrieved user: %+v\\n", retrievedUser)
}`;

const csharpCode = `// C# example with async/await and LINQ
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

public class User
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Email { get; set; }
    public DateTime CreatedAt { get; set; }
}

public interface IUserService
{
    Task<User> GetUserAsync(int id);
    Task<IEnumerable<User>> GetAllUsersAsync();
    Task<User> CreateUserAsync(User user);
}

public class UserService : IUserService
{
    private readonly List<User> _users = new();
    
    public async Task<User> GetUserAsync(int id)
    {
        // Simulate async operation
        await Task.Delay(50);
        return _users.FirstOrDefault(u => u.Id == id);
    }
    
    public async Task<IEnumerable<User>> GetAllUsersAsync()
    {
        await Task.Delay(50);
        return _users.AsEnumerable();
    }
    
    public async Task<User> CreateUserAsync(User user)
    {
        user.CreatedAt = DateTime.UtcNow;
        _users.Add(user);
        await Task.Delay(50);
        return user;
    }
}

class Program
{
    static async Task Main(string[] args)
    {
        var service = new UserService();
        
        var user = new User
        {
            Id = 1,
            Name = "John Doe",
            Email = "john@example.com"
        };
        
        await service.CreateUserAsync(user);
        var retrievedUser = await service.GetUserAsync(1);
        
        Console.WriteLine($"User: {retrievedUser?.Name} ({retrievedUser?.Email})");
    }
}`;

// Additional code samples for inline editors
const rustThemeCode = `// Rust example with modern syntax
use std::collections::HashMap;
use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize, Debug)]
struct User {
    id: u32,
    name: String,
    email: String,
}

impl User {
    fn new(id: u32, name: String, email: String) -> Self {
        Self { id, name, email }
    }
}

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let mut users: HashMap<u32, User> = HashMap::new();
    
    let user = User::new(1, "Alice".to_string(), "alice@example.com".to_string());
    users.insert(user.id, user);
    
    println!("Users: {:#?}", users);
    Ok(())
}`;

const goThemeCode = `// Go example with interfaces and goroutines
package main

import (
    "fmt"
    "sync"
    "time"
)

type User struct {
    ID    int    \`json:"id"\`
    Name  string \`json:"name"\`
    Email string \`json:"email"\`
}

type UserService interface {
    CreateUser(user User) error
    GetUser(id int) (*User, error)
}

type InMemoryUserService struct {
    users map[int]User
    mutex sync.RWMutex
}

func (s *InMemoryUserService) CreateUser(user User) error {
    s.mutex.Lock()
    defer s.mutex.Unlock()
    s.users[user.ID] = user
    return nil
}

func (s *InMemoryUserService) GetUser(id int) (*User, error) {
    s.mutex.RLock()
    defer s.mutex.RUnlock()
    if user, exists := s.users[id]; exists {
        return &user, nil
    }
    return nil, fmt.Errorf("user not found")
}`;

const csharpThemeCode = `// C# example with async/await and LINQ
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace UserManagement
{
    public class User
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
        public DateTime CreatedAt { get; set; }
    }

    public interface IUserRepository
    {
        Task<User> GetUserAsync(int id);
        Task<IEnumerable<User>> GetUsersAsync();
        Task<User> CreateUserAsync(User user);
    }

    public class UserService
    {
        private readonly IUserRepository _repository;

        public UserService(IUserRepository repository)
        {
            _repository = repository;
        }

        public async Task<User> CreateUserAsync(string name, string email)
        {
            var user = new User
            {
                Name = name,
                Email = email,
                CreatedAt = DateTime.UtcNow
            };

            return await _repository.CreateUserAsync(user);
        }
    }
}`;

const markdownCode = `# Monaco Editor Advanced Configuration

This editor demonstrates several important configuration options that make it more suitable for **documentation and long-form content**:

## Key Features Enabled:
- **Word wrap**: Long lines automatically wrap to the next line for better readability
- **No minimap**: More space for content, less distractions
- **No line numbers**: Cleaner appearance for documentation
- **Larger font size**: Better readability at 16px instead of default 14px

## Use Cases:
1. **Documentation editing** - Perfect for README files, documentation, and help content
2. **Content management** - Blog posts, articles, and long-form content
3. **Note taking** - Quick notes and brainstorming sessions
4. **Code comments** - Detailed code documentation and comments

This configuration prioritizes readability and content focus over traditional code editing features.`;

const sqlCode = `-- Advanced SQL Query with CTEs and Window Functions
WITH user_stats AS (
    SELECT 
        u.id,
        u.name,
        u.email,
        u.created_at,
        COUNT(o.id) as total_orders,
        SUM(o.total_amount) as total_spent,
        AVG(o.total_amount) as avg_order_value,
        ROW_NUMBER() OVER (ORDER BY SUM(o.total_amount) DESC) as spending_rank
    FROM users u
    LEFT JOIN orders o ON u.id = o.user_id
    WHERE u.created_at >= '2024-01-01'
    GROUP BY u.id, u.name, u.email, u.created_at
),
monthly_trends AS (
    SELECT 
        DATE_TRUNC('month', o.created_at) as month,
        COUNT(*) as orders_count,
        SUM(o.total_amount) as monthly_revenue,
        COUNT(DISTINCT o.user_id) as active_users
    FROM orders o
    WHERE o.created_at >= CURRENT_DATE - INTERVAL '12 months'
    GROUP BY DATE_TRUNC('month', o.created_at)
    ORDER BY month DESC
)
SELECT 
    us.name,
    us.email,
    us.total_orders,
    us.total_spent,
    us.avg_order_value,
    us.spending_rank,
    CASE 
        WHEN us.spending_rank <= 10 THEN 'VIP'
        WHEN us.spending_rank <= 50 THEN 'Premium'
        WHEN us.total_orders >= 5 THEN 'Regular'
        ELSE 'New'
    END as customer_tier
FROM user_stats us
WHERE us.total_orders > 0
ORDER BY us.spending_rank;`;

const jsErrorCode = `// This code contains intentional syntax errors for testing
function calculateTotal(items {  // Missing closing parenthesis
  let total = 0;
  
  for (let item of items) {
    total += item.price * item.quantity
  }  // Missing semicolon
  
  return total
}

// Undefined variable
console.log(calculateTotal(shoppingCart));

// Incorrect syntax
const user = {
  name: 'John',
  age: 30,
  email: 'john@example.com'
  // Missing comma
  city: 'New York'
};`;

const tsValidCode = `// This is valid TypeScript code with proper types
interface ShoppingItem {
  id: number;
  name: string;
  price: number;
  quantity: number;
}

function calculateTotal(items: ShoppingItem[]): number {
  let total = 0;
  
  for (const item of items) {
    total += item.price * item.quantity;
  }
  
  return total;
}

const shoppingCart: ShoppingItem[] = [
  { id: 1, name: 'Laptop', price: 999.99, quantity: 1 },
  { id: 2, name: 'Mouse', price: 29.99, quantity: 2 }
];

console.log(\`Total: $\${calculateTotal(shoppingCart).toFixed(2)}\`);`;

const bashCode = `#!/bin/bash
# Quick deployment script
docker build -t myapp .
docker run -d -p 3000:3000 myapp
echo "Application deployed on port 3000"`;

const javaCode = `package com.example.userservice;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;
import java.time.LocalDateTime;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * Comprehensive User Management Service
 * 
 * This service provides full CRUD operations for user management
 * with caching, validation, and audit logging capabilities.
 */
@Service
@Transactional
public class UserManagementService {
    
    private final Map<Long, User> userCache = new ConcurrentHashMap<>();
    private final UserRepository userRepository;
    private final AuditLogger auditLogger;
    private final EmailService emailService;
    
    public UserManagementService(UserRepository userRepository, 
                               AuditLogger auditLogger,
                               EmailService emailService) {
        this.userRepository = userRepository;
        this.auditLogger = auditLogger;
        this.emailService = emailService;
    }
    
    /**
     * Creates a new user with validation and audit logging
     */
    public User createUser(CreateUserRequest request) throws UserValidationException {
        validateUserRequest(request);
        
        User user = User.builder()
            .name(request.getName())
            .email(request.getEmail())
            .role(request.getRole())
            .createdAt(LocalDateTime.now())
            .isActive(true)
            .build();
            
        User savedUser = userRepository.save(user);
        userCache.put(savedUser.getId(), savedUser);
        
        auditLogger.logUserCreation(savedUser);
        emailService.sendWelcomeEmail(savedUser);
        
        return savedUser;
    }
    
    /**
     * Retrieves user by ID with caching
     */
    public Optional<User> getUserById(Long userId) {
        return Optional.ofNullable(
            userCache.computeIfAbsent(userId, id -> 
                userRepository.findById(id).orElse(null)
            )
        );
    }
    
    /**
     * Updates user information with validation
     */
    public User updateUser(Long userId, UpdateUserRequest request) 
            throws UserNotFoundException, UserValidationException {
        
        User existingUser = getUserById(userId)
            .orElseThrow(() -> new UserNotFoundException("User not found: " + userId));
            
        validateUpdateRequest(request);
        
        User updatedUser = existingUser.toBuilder()
            .name(request.getName() != null ? request.getName() : existingUser.getName())
            .email(request.getEmail() != null ? request.getEmail() : existingUser.getEmail())
            .role(request.getRole() != null ? request.getRole() : existingUser.getRole())
            .updatedAt(LocalDateTime.now())
            .build();
            
        User savedUser = userRepository.save(updatedUser);
        userCache.put(savedUser.getId(), savedUser);
        
        auditLogger.logUserUpdate(existingUser, savedUser);
        
        return savedUser;
    }
    
    /**
     * Soft delete user (mark as inactive)
     */
    public void deactivateUser(Long userId) throws UserNotFoundException {
        User user = getUserById(userId)
            .orElseThrow(() -> new UserNotFoundException("User not found: " + userId));
            
        User deactivatedUser = user.toBuilder()
            .isActive(false)
            .updatedAt(LocalDateTime.now())
            .build();
            
        userRepository.save(deactivatedUser);
        userCache.remove(userId);
        
        auditLogger.logUserDeactivation(user);
    }
    
    /**
     * Search users with filtering and pagination
     */
    public List<User> searchUsers(UserSearchCriteria criteria) {
        return userRepository.findAll()
            .stream()
            .filter(user -> matchesCriteria(user, criteria))
            .sorted(Comparator.comparing(User::getCreatedAt).reversed())
            .skip(criteria.getOffset())
            .limit(criteria.getLimit())
            .collect(Collectors.toList());
    }
    
    private void validateUserRequest(CreateUserRequest request) throws UserValidationException {
        if (request.getName() == null || request.getName().trim().isEmpty()) {
            throw new UserValidationException("Name is required");
        }
        if (request.getEmail() == null || !isValidEmail(request.getEmail())) {
            throw new UserValidationException("Valid email is required");
        }
        if (userRepository.existsByEmail(request.getEmail())) {
            throw new UserValidationException("Email already exists");
        }
    }
    
    private boolean isValidEmail(String email) {
        return email.contains("@") && email.contains(".");
    }
    
    private boolean matchesCriteria(User user, UserSearchCriteria criteria) {
        if (criteria.getName() != null && 
            !user.getName().toLowerCase().contains(criteria.getName().toLowerCase())) {
            return false;
        }
        if (criteria.getRole() != null && !user.getRole().equals(criteria.getRole())) {
            return false;
        }
        if (criteria.getIsActive() != null && !user.getIsActive().equals(criteria.getIsActive())) {
            return false;
        }
        return true;
    }
}`;

const dynamicJsCode = `// Select a language and adjust settings to see changes
console.log('Dynamic Monaco Editor Demo');`;

const jsPlaceholder = `// Start coding in JavaScript here...
function myFunction() {
  // Your code here
  console.log('Hello, World!');
}

myFunction();`;

const pythonPlaceholder = `# Start coding in Python here...
def my_function():
    """Your function documentation"""
    print('Hello, World!')

if __name__ == '__main__':
    my_function()`;

const formJsCode = `// Code snippet example
function greetUser(name) {
  return \`Hello, \${name}! Welcome to our platform.\`;
}

const user = 'Alice';
console.log(greetUser(user));`;

// Code templates for dynamic editor
const jsTemplate = `// JavaScript Example
function hello(name) {
  console.log(\`Hello, \${name}!\`);
}

hello("World");`;

const pythonTemplate = `# Python Example
def hello(name):
    print(f"Hello, {name}!")

if __name__ == "__main__":
    hello("World")`;

const rustTemplate = `// Rust Example
fn main() {
    let name = "World";
    println!("Hello, {}!", name);
}`;

const goTemplate = `// Go Example
package main

import "fmt"

func main() {
    name := "World"
    fmt.Printf("Hello, %s!\n", name)
}`;

const htmlTemplate = `<!DOCTYPE html>
<html>
<head>
    <title>Hello World</title>
</head>
<body>
    <h1>Hello, World!</h1>
</body>
</html>`;

const cssTemplate = `/* CSS Example */
.hello {
  color: #3b82f6;
  font-size: 24px;
  font-weight: bold;
  text-align: center;
}

.world {
  background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
}`;

const jsonTemplate = `{
  "greeting": "Hello, World!",
  "language": "json",
  "features": [
    "Data exchange",
    "Configuration",
    "API responses"
  ]
}`;
---

<Layout title="MonacoEditor Component Test">
  <main class="container mx-auto px-4 py-8 max-w-6xl">
    <!-- Header -->
    <div class="text-center mb-8">
      <h1 class="text-3xl font-bold mb-4">MonacoEditor Component Test</h1>
      <div class="flex justify-center gap-2 mb-6">
        <Button href="/test" variant="outline" color="neutral">← Back to Test Suite</Button>
        <Button href="/test/index" variant="ghost" color="neutral">View All</Button>
      </div>
      <p class="text-gray-600 max-w-2xl mx-auto">
        Comprehensive testing of the Monaco Editor component with different languages, themes, configurations, and form integration.
        Monaco Editor is loaded from CDN and may take a moment to initialize.
      </p>
    </div>

    <!-- Basic Language Support Test -->
    <Card class="mb-8">
      <div class="p-6">
        <h2 class="text-2xl font-bold mb-4">Programming Languages</h2>
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div>
            <h3 class="text-lg font-semibold mb-3">JavaScript/TypeScript</h3>
            <MonacoEditor 
              id="js-editor"
              language="typescript"
              theme="vs-dark"
              height="250px"
              value={typescriptCode}
            />
          </div>
          
          <div>
            <h3 class="text-lg font-semibold mb-3">Python</h3>
            <MonacoEditor 
              id="python-editor"
              language="python"
              theme="vs-dark"
              height="250px"
              value={pythonCode}
            />
          </div>
          
          <div>
            <h3 class="text-lg font-semibold mb-3">HTML</h3>
            <MonacoEditor 
              id="html-editor"
              language="html"
              theme="vs-light"
              height="250px"
              value={htmlCode}
            />
          </div>
          
          <div>
            <h3 class="text-lg font-semibold mb-3">CSS</h3>
            <MonacoEditor 
              id="css-editor"
              language="css"
              theme="vs-light"
              height="250px"
              value={cssCode}
            />
          </div>
        </div>
      </div>
    </Card>

    <!-- Theme Variations Test -->
    <Card class="mb-8">
      <div class="p-6">
        <h2 class="text-2xl font-bold mb-4">Theme Variations</h2>
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div>
            <h3 class="text-lg font-semibold mb-3">Dark Theme (vs-dark)</h3>
            <MonacoEditor 
              id="dark-theme-editor"
              language="rust"
              theme="vs-dark"
              height="200px"
              value={rustThemeCode}
            />
          </div>
          
          <div>
            <h3 class="text-lg font-semibold mb-3">Light Theme (vs-light)</h3>
            <MonacoEditor 
              id="light-theme-editor"
              language="go"
              theme="vs-light"
              height="200px"
              value={goThemeCode}
            />
          </div>
          
          <div>
            <h3 class="text-lg font-semibold mb-3">High Contrast (hc-black)</h3>
            <MonacoEditor 
              id="hc-theme-editor"
              language="csharp"
              theme="hc-black"
              height="200px"
              value={csharpThemeCode}
            />
          </div>
        </div>
      </div>
    </Card>

    <!-- Read-only vs Editable Test -->
    <Card class="mb-8">
      <div class="p-6">
        <h2 class="text-2xl font-bold mb-4">Read-only vs Editable</h2>
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div>
            <h3 class="text-lg font-semibold mb-3">Editable JSON Configuration</h3>
            <MonacoEditor 
              id="editable-editor"
              language="json"
              theme="vs-dark"
              height="300px"
              readOnly={false}
              value={jsonCode}
            />
            <p class="text-sm text-gray-600 mt-2">✏️ This editor is editable - try formatting with Alt+Shift+F</p>
          </div>
          
          <div>
            <h3 class="text-lg font-semibold mb-3">Read-only Code Display</h3>
            <MonacoEditor 
              id="readonly-editor"
              language="yaml"
              theme="vs-dark"
              height="300px"
              readOnly={true}
              value={yamlCode}
            />
            <p class="text-sm text-gray-600 mt-2">🔒 This editor is read-only - perfect for code documentation</p>
          </div>
        </div>
      </div>
    </Card>

    <!-- Configuration Options Test -->
    <Card class="mb-8">
      <div class="p-6">
        <h2 class="text-2xl font-bold mb-4">Configuration Options</h2>
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div>
            <h3 class="text-lg font-semibold mb-3">No Minimap, Word Wrap, Large Font</h3>
            <MonacoEditor 
              id="config1-editor"
              language="markdown"
              theme="vs-light"
              height="250px"
              minimap={false}
              wordWrap="on"
              lineNumbers="off"
              fontSize={16}
              value={markdownCode}
            />
          </div>
          
          <div>
            <h3 class="text-lg font-semibold mb-3">Development Mode: All Features</h3>
            <MonacoEditor 
              id="config2-editor"
              language="sql"
              theme="vs-dark"
              height="250px"
              fontSize={14}
              lineNumbers="on"
              minimap={true}
              wordWrap="off"
              value={sqlCode}
            />
          </div>
        </div>
      </div>
    </Card>

    <!-- Form Integration Test -->
    <Card class="mb-8">
      <div class="p-6">
        <h2 class="text-2xl font-bold mb-4">Form Integration & Data Binding</h2>
        <div x-data="{
          formData: {
            title: 'My Code Snippet',
            language: 'javascript',
            code: formJsCode,
            description: 'A simple greeting function that demonstrates template literals and arrow functions in modern JavaScript.'
          },
          submitForm() {
            alert('Form submitted! Check console for data.');
            console.log('Form Data:', this.formData);
          }
        }">
          <form @submit.prevent="submitForm()" class="space-y-6">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div class="space-y-4">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1">Snippet Title:</label>
                  <input 
                    type="text" 
                    x-model="formData.title"
                    class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="Enter snippet title"
                  />
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1">Programming Language:</label>
                  <select 
                    x-model="formData.language" 
                    class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  >
                    <option value="javascript">JavaScript</option>
                    <option value="typescript">TypeScript</option>
                    <option value="python">Python</option>
                    <option value="rust">Rust</option>
                    <option value="go">Go</option>
                    <option value="java">Java</option>
                    <option value="csharp">C#</option>
                    <option value="html">HTML</option>
                    <option value="css">CSS</option>
                    <option value="json">JSON</option>
                    <option value="yaml">YAML</option>
                    <option value="sql">SQL</option>
                  </select>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-1">Description:</label>
                  <textarea 
                    x-model="formData.description"
                    class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    rows="4"
                    placeholder="Describe your code snippet"
                  ></textarea>
                </div>
                
                <Button type="submit" variant="solid" color="blue" class="w-full">
                  Save Code Snippet
                </Button>
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Code Editor:</label>
                <MonacoEditor 
                  id="form-editor"
                  :language="formData.language"
                  theme="vs-dark"
                  height="350px"
                  name="code"
                  x-model="formData.code"
                  @monaco-change="formData.code = $event.detail.value"
                />
              </div>
            </div>
            
            <div class="mt-6 p-4 bg-gray-50 border border-gray-200 rounded-lg">
              <h4 class="font-semibold text-gray-800 mb-2">Live Form Data Preview:</h4>
              <div class="text-sm space-y-1">
                <div><strong>Title:</strong> <span x-text="formData.title"></span></div>
                <div><strong>Language:</strong> <span x-text="formData.language"></span></div>
                <div><strong>Code Length:</strong> <span x-text="formData.code.length"></span> characters</div>
                <div><strong>Description:</strong> <span x-text="formData.description.substring(0, 100) + (formData.description.length > 100 ? '...' : '')"></span></div>
              </div>
            </div>
          </form>
        </div>
      </div>
    </Card>

    <!-- Error Handling and Validation Test -->
    <Card class="mb-8">
      <div class="p-6">
        <h2 class="text-2xl font-bold mb-4">Code Validation & Error Highlighting</h2>
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div>
            <h3 class="text-lg font-semibold mb-3">JavaScript with Syntax Errors</h3>
            <MonacoEditor 
              id="error-js-editor"
              language="javascript"
              theme="vs-dark"
              height="250px"
              value={jsErrorCode}
            />
            <p class="text-sm text-red-600 mt-2">⚠️ This code contains syntax errors that Monaco should highlight</p>
          </div>
          
          <div>
            <h3 class="text-lg font-semibold mb-3">Valid TypeScript Code</h3>
            <MonacoEditor 
              id="valid-ts-editor"
              language="typescript"
              theme="vs-dark"
              height="250px"
              value={tsValidCode}
            />
            <p class="text-sm text-green-600 mt-2">✅ This code is syntactically correct and properly typed</p>
          </div>
        </div>
      </div>
    </Card>

    <!-- Different Sizes Test -->
    <Card class="mb-8">
      <div class="p-6">
        <h2 class="text-2xl font-bold mb-4">Different Editor Sizes</h2>
        <div class="space-y-6">
          <div>
            <h3 class="text-lg font-semibold mb-3">Compact Editor (150px height) - Quick Snippets</h3>
            <MonacoEditor 
              id="compact-editor"
              language="bash"
              theme="vs-dark"
              height="150px"
              value={bashCode}
            />
          </div>
          
          <div>
            <h3 class="text-lg font-semibold mb-3">Large Editor (600px height) - Full Development</h3>
            <MonacoEditor 
              id="large-editor"
              language="java"
              theme="vs-light"
              height="600px"
              value={javaCode}
            />
          </div>
        </div>
      </div>
    </Card>

    <!-- Interactive Dynamic Controls -->
    <Card class="mb-8">
      <div class="p-6">
        <h2 class="text-2xl font-bold mb-4">Dynamic Editor Controls</h2>
        <div x-data="{ 
          selectedLanguage: 'javascript',
          selectedTheme: 'vs-dark',
          editorFontSize: 14,
          showMinimap: true,
          enableWordWrap: false,
          editorHeight: '400px',
          codeTemplates: {
            javascript: jsTemplate,
            python: pythonTemplate,
            rust: rustTemplate,
            go: goTemplate,
            html: htmlTemplate,
            css: cssTemplate,
            json: jsonTemplate
          },
          getCurrentTemplate() {
            return this.codeTemplates[this.selectedLanguage] || '// Code example';
          }
        }">
          <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div class="space-y-4">
              <h3 class="text-lg font-semibold">Editor Controls</h3>
              
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Language:</label>
                <select x-model="selectedLanguage" class="w-full p-2 border border-gray-300 rounded-md">
                  <option value="javascript">JavaScript</option>
                  <option value="python">Python</option>
                  <option value="typescript">TypeScript</option>
                  <option value="rust">Rust</option>
                  <option value="go">Go</option>
                  <option value="html">HTML</option>
                  <option value="css">CSS</option>
                  <option value="json">JSON</option>
                  <option value="sql">SQL</option>
                  <option value="yaml">YAML</option>
                </select>
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Theme:</label>
                <select x-model="selectedTheme" class="w-full p-2 border border-gray-300 rounded-md">
                  <option value="vs-dark">Dark Theme</option>
                  <option value="vs-light">Light Theme</option>
                  <option value="hc-black">High Contrast</option>
                </select>
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">
                  Font Size: <span x-text="editorFontSize + 'px'"></span>
                </label>
                <input 
                  type="range" 
                  x-model="editorFontSize" 
                  min="10" 
                  max="24" 
                  class="w-full"
                />
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Editor Height:</label>
                <select x-model="editorHeight" class="w-full p-2 border border-gray-300 rounded-md">
                  <option value="200px">Compact (200px)</option>
                  <option value="300px">Medium (300px)</option>
                  <option value="400px">Large (400px)</option>
                  <option value="500px">Extra Large (500px)</option>
                </select>
              </div>
              
              <div class="space-y-2">
                <label class="flex items-center">
                  <input type="checkbox" x-model="showMinimap" class="mr-2">
                  Show Minimap
                </label>
                <label class="flex items-center">
                  <input type="checkbox" x-model="enableWordWrap" class="mr-2">
                  Enable Word Wrap
                </label>
              </div>
              
              <Button 
                @click="$dispatch('monaco-set-template', { template: getCurrentTemplate() })"
                variant="outline" 
                color="blue" 
                class="w-full"
              >
                Load Template
              </Button>
            </div>
            
            <div class="lg:col-span-2">
              <h3 class="text-lg font-semibold mb-3">Live Editor Preview</h3>
              <MonacoEditor 
                id="dynamic-editor"
                :language="selectedLanguage"
                :theme="selectedTheme"
                :height="editorHeight"
                :fontSize="parseInt(editorFontSize)"
                :minimap="showMinimap"
                :wordWrap="enableWordWrap ? 'on' : 'off'"
                @monaco-ready="console.log('Dynamic editor ready')"
                value={dynamicJsCode}
              />
              
              <div class="mt-4 p-3 bg-gray-50 border border-gray-200 rounded-lg text-sm">
                <strong>Current Settings:</strong>
                <div class="grid grid-cols-2 gap-2 mt-2">
                  <div>Language: <span class="font-mono" x-text="selectedLanguage"></span></div>
                  <div>Theme: <span class="font-mono" x-text="selectedTheme"></span></div>
                  <div>Font Size: <span class="font-mono" x-text="editorFontSize + 'px'"></span></div>
                  <div>Height: <span class="font-mono" x-text="editorHeight"></span></div>
                  <div>Minimap: <span class="font-mono" x-text="showMinimap ? 'Enabled' : 'Disabled'"></span></div>
                  <div>Word Wrap: <span class="font-mono" x-text="enableWordWrap ? 'Enabled' : 'Disabled'"></span></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </Card>

    <!-- Placeholder Test -->
    <Card class="mb-8">
      <div class="p-6">
        <h2 class="text-2xl font-bold mb-4">Placeholder Text Examples</h2>
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div>
            <h3 class="text-lg font-semibold mb-3">Empty JavaScript Editor</h3>
            <MonacoEditor 
              id="placeholder-js-editor"
              language="javascript"
              theme="vs-dark"
              height="200px"
              value=""
              placeholder={jsPlaceholder}
            />
          </div>
          
          <div>
            <h3 class="text-lg font-semibold mb-3">Empty Python Editor</h3>
            <MonacoEditor 
              id="placeholder-python-editor"
              language="python"
              theme="vs-light"
              height="200px"
              value=""
              placeholder={pythonPlaceholder}
            />
          </div>
        </div>
      </div>
    </Card>

    <!-- Performance and Features Summary -->
    <Card>
      <div class="p-6">
        <h2 class="text-2xl font-bold mb-4">Monaco Editor Features & Performance</h2>
        
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
          <div class="text-center p-4 bg-blue-50 rounded-lg">
            <Badge color="blue" class="mb-2">🚀 CDN Loading</Badge>
            <p class="text-sm">Fast initialization from unpkg CDN</p>
          </div>
          <div class="text-center p-4 bg-green-50 rounded-lg">
            <Badge color="green" class="mb-2">✅ 15+ Languages</Badge>
            <p class="text-sm">JavaScript, Python, Rust, Go, Java, C#, and more</p>
          </div>
          <div class="text-center p-4 bg-purple-50 rounded-lg">
            <Badge color="purple" class="mb-2">🎨 3 Themes</Badge>
            <p class="text-sm">Dark, Light, and High Contrast themes</p>
          </div>
          <div class="text-center p-4 bg-orange-50 rounded-lg">
            <Badge color="orange" class="mb-2">⚡ Alpine.js</Badge>
            <p class="text-sm">Reactive data binding and form integration</p>
          </div>
        </div>
        
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div>
            <h3 class="font-semibold text-gray-800 mb-3">✨ Key Features Tested:</h3>
            <ul class="text-sm text-gray-600 space-y-1">
              <li>✓ Multi-language syntax highlighting</li>
              <li>✓ IntelliSense and code completion</li>
              <li>✓ Error detection and validation</li>
              <li>✓ Customizable themes and fonts</li>
              <li>✓ Read-only and editable modes</li>
              <li>✓ Form integration with Alpine.js</li>
              <li>✓ Dynamic configuration changes</li>
              <li>✓ Responsive sizing options</li>
              <li>✓ Placeholder text support</li>
              <li>✓ Minimap and word wrap controls</li>
            </ul>
          </div>
          
          <div>
            <h3 class="font-semibold text-gray-800 mb-3">⌨️ Keyboard Shortcuts:</h3>
            <ul class="text-sm text-gray-600 space-y-1">
              <li><kbd class="px-1 py-0.5 bg-gray-200 rounded text-xs">Ctrl+Space</kbd> - Trigger suggestions</li>
              <li><kbd class="px-1 py-0.5 bg-gray-200 rounded text-xs">Alt+Shift+F</kbd> - Format document</li>
              <li><kbd class="px-1 py-0.5 bg-gray-200 rounded text-xs">Ctrl+F</kbd> - Find text</li>
              <li><kbd class="px-1 py-0.5 bg-gray-200 rounded text-xs">Ctrl+H</kbd> - Find and replace</li>
              <li><kbd class="px-1 py-0.5 bg-gray-200 rounded text-xs">Ctrl+/</kbd> - Toggle line comment</li>
              <li><kbd class="px-1 py-0.5 bg-gray-200 rounded text-xs">Alt+Up/Down</kbd> - Move line up/down</li>
              <li><kbd class="px-1 py-0.5 bg-gray-200 rounded text-xs">Shift+Alt+Up/Down</kbd> - Copy line up/down</li>
              <li><kbd class="px-1 py-0.5 bg-gray-200 rounded text-xs">Ctrl+D</kbd> - Select next occurrence</li>
            </ul>
          </div>
        </div>
        
        <div class="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
          <h3 class="font-semibold text-blue-800 mb-2">💡 Integration Notes:</h3>
          <ul class="text-sm text-blue-700 space-y-1">
            <li>• Monaco Editor loads asynchronously from CDN with loading and error states</li>
            <li>• Alpine.js provides reactive data binding and event handling</li>
            <li>• Form integration allows seamless code editing in web applications</li>
            <li>• All editor instances are independent and can have different configurations</li>
            <li>• The component supports both controlled and uncontrolled usage patterns</li>
            <li>• Auto-resize functionality works with responsive layouts</li>
          </ul>
        </div>
      </div>
    </Card>
  </main>
</Layout>