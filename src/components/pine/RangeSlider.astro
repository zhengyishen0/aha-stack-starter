---
export interface Props {
  min?: number;
  max?: number;
  step?: number;
  value?: number;
  disabled?: boolean;
  name?: string;
  id?: string;
  showValue?: boolean;
  size?: 'sm' | 'md' | 'lg';
  class?: string;
}

const { 
  min = 0,
  max = 100,
  step = 1,
  value = 50,
  disabled = false,
  name,
  id,
  showValue = true,
  size = 'md',
  class: className = ""
} = Astro.props;

// Generate design system classes
const getComponentClasses = () => {
  const baseClass = 'range-slider';
  const sizeClass = size ? `${baseClass}-${size}` : '';
  return `${baseClass} ${sizeClass}`.trim();
};
---

<!-- 
Pine UI Range Slider Component

Usage:
<RangeSlider 
  min={0}
  max={100}
  step={1}
  value={50}
  disabled={false}
  showValue={true}
  name="slider"
/>

Features:
- Custom min/max/step values
- Value display
- Disabled state
- Cross-browser styling
- Alpine.js integration
-->

<div 
  x-data={`{
    sliderValue: ${value},
    min: ${min},
    max: ${max},
    step: ${step}
  }`}
  class={`range-slider-wrapper ${className}`}
>
  <div class="range-slider-container">
    <!-- Range input -->
    <input 
      type="range"
      :min="min"
      :max="max"
      :step="step"
      x-model="sliderValue"
      name={name}
      id={id}
      disabled={disabled}
      class={`${getComponentClasses()} ${disabled ? 'disabled' : ''}`}
    />
    
    <!-- Value display -->
    {showValue && (
      <div class="range-slider-value">
        <span x-text="sliderValue"></span>
      </div>
    )}
  </div>
  
  <!-- Min/max labels -->
  <div class="range-slider-labels">
    <span class="range-slider-min">{min}</span>
    <span class="range-slider-max">{max}</span>
  </div>
</div>

<!-- Styles are now handled by the design system CSS -->