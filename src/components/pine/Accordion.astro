---
export interface Props {
  items: Array<{
    id?: string;
    title: string;
    content: string;
  }>;
  class?: string;
}

const { items, class: className = "" } = Astro.props;

const getAccordionClasses = () => {
  const baseClass = 'accordion';
  return `${baseClass} ${className}`.trim();
};

const getAccordionItemClasses = () => {
  return 'accordion-item';
};

const getAccordionButtonClasses = () => {
  return 'accordion-button';
};

const getAccordionContentClasses = () => {
  return 'accordion-content';
};
---

<!-- 
Pine UI Accordion Component

Usage:
<Accordion 
  items={[
    { title: "Question 1", content: "Answer content here" },
    { title: "Question 2", content: "More answer content" }
  ]} 
/>

Features:
- Collapse/expand animation
- Only one item open at a time
- Alpine.js powered reactivity
- Requires Alpine.js and Collapse plugin
-->

<div 
  x-data="{ 
    activeAccordion: '', 
    setActiveAccordion(id) { 
      this.activeAccordion = (this.activeAccordion == id) ? '' : id 
    } 
  }"
  class={getAccordionClasses()}
>
  {items.map((item, index) => (
    <div x-data={`{ id: $id('accordion-${index}') }`} class={getAccordionItemClasses()}>
      <button 
        @click="setActiveAccordion(id)"
        class={getAccordionButtonClasses()}
        type="button"
      >
        <span class="accordion-title">{item.title}</span>
        <svg 
          class="accordion-icon"
          :class="{ 'accordion-icon-open': activeAccordion === id }"
          fill="none" 
          stroke="currentColor" 
          viewBox="0 0 24 24"
        >
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
        </svg>
      </button>
      <div 
        x-show="activeAccordion === id" 
        x-collapse 
        x-cloak
        class={getAccordionContentClasses()}
      >
        <div class="accordion-text">
          {item.content}
        </div>
      </div>
    </div>
  ))}
</div>