---
export interface MenuItem {
  label: string;
  shortcut?: string;
  action?: string;
  separator?: boolean;
  disabled?: boolean;
  items?: MenuItem[];
}

export interface Props {
  items: MenuItem[];
  variant?: 'desktop' | 'web';
  class?: string;
}

const { 
  items,
  variant = 'web',
  class: className = ""
} = Astro.props;

const menuBarClasses: { [key: string]: string } = {
  desktop: 'bg-neutral-100 border-b border-neutral-200 px-2 py-1',
  web: 'bg-white border-b border-neutral-200 shadow-sm'
};
---

<!-- 
Pine UI MenuBar Component

Usage:
<MenuBar 
  variant="web"
  items={[
    {
      label: 'File',
      items: [
        { label: 'New', shortcut: 'Cmd+N', action: 'new()' },
        { label: 'Open', shortcut: 'Cmd+O', action: 'open()' },
        { separator: true },
        { label: 'Save', shortcut: 'Cmd+S', action: 'save()' },
        { label: 'Export', disabled: true }
      ]
    },
    {
      label: 'Edit',
      items: [
        { label: 'Undo', shortcut: 'Cmd+Z', action: 'undo()' },
        { label: 'Redo', shortcut: 'Cmd+Shift+Z', action: 'redo()' }
      ]
    }
  ]}
/>

Props:
- items: Array of menu items with nested structure
- variant: Style variant - 'desktop' (native app style) or 'web' (web app style)
- class: Additional CSS classes

MenuItem Interface:
- label: Display text
- shortcut: Keyboard shortcut text (optional)
- action: JavaScript function to execute (optional)
- separator: Show as separator line (optional)
- disabled: Disable the item (optional)
- items: Nested submenu items (optional)
-->

<nav 
  class={`${menuBarClasses[variant]} ${className}`}
  x-data="{ 
    activeMenu: null,
    openMenu(index) {
      this.activeMenu = this.activeMenu === index ? null : index;
    },
    closeMenu() {
      this.activeMenu = null;
    },
    executeAction(action) {
      if (action && typeof window[action] === 'function') {
        window[action]();
      }
      this.closeMenu();
    }
  }"
  @click.away="closeMenu()"
  @keydown.escape="closeMenu()"
>
  <ul class="flex items-center space-x-1">
    {items.map((item, index) => (
      <li class="relative">
        <button
          class={`px-3 py-1 text-sm font-medium rounded transition-colors duration-150 ${
            variant === 'desktop' 
              ? 'text-neutral-700 hover:bg-neutral-200 focus:bg-neutral-200' 
              : 'text-neutral-600 hover:bg-neutral-100 focus:bg-neutral-100'
          }`}
          @click={`openMenu(${index})`}
          @mouseenter={`openMenu(${index})`}
          :class={`{ 'bg-neutral-200': activeMenu === ${index} }`}
          type="button"
        >
          {item.label}
        </button>
        
        {item.items && (
          <div
            x-show={`activeMenu === ${index}`}
            x-transition:enter="transition ease-out duration-100"
            x-transition:enter-start="transform opacity-0 scale-95"
            x-transition:enter-end="transform opacity-100 scale-100"
            x-transition:leave="transition ease-in duration-75"
            x-transition:leave-start="transform opacity-100 scale-100"
            x-transition:leave-end="transform opacity-0 scale-95"
            class="absolute left-0 mt-1 w-56 bg-white border border-neutral-200 rounded-md shadow-lg z-50"
            @click.stop
          >
            <ul class="py-1">
              {item.items.map((subItem) => (
                subItem.separator ? (
                  <li>
                    <hr class="my-1 border-neutral-200" />
                  </li>
                ) : (
                  <li>
                    <button
                      class={`w-full px-4 py-2 text-sm text-left flex items-center justify-between transition-colors duration-150 ${
                        subItem.disabled 
                          ? 'text-neutral-400 cursor-not-allowed' 
                          : 'text-neutral-700 hover:bg-neutral-100 focus:bg-neutral-100'
                      }`}
                      @click={subItem.action && !subItem.disabled ? `executeAction('${subItem.action}')` : ''}
                      disabled={subItem.disabled}
                      type="button"
                    >
                      <span>{subItem.label}</span>
                      {subItem.shortcut && (
                        <span class="text-xs text-neutral-500 ml-4">
                          {subItem.shortcut}
                        </span>
                      )}
                    </button>
                  </li>
                )
              ))}
            </ul>
          </div>
        )}
      </li>
    ))}
  </ul>
</nav>

<script>
  // Global keyboard shortcut handler for menu actions
  document.addEventListener('keydown', (e) => {
    const isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;
    const cmdKey = isMac ? e.metaKey : e.ctrlKey;
    
    // Handle common shortcuts
    if (cmdKey) {
      switch(e.key.toLowerCase()) {
        case 'n':
          if (typeof window.new === 'function') {
            e.preventDefault();
            window.new();
          }
          break;
        case 'o':
          if (typeof window.open === 'function') {
            e.preventDefault();
            window.open();
          }
          break;
        case 's':
          if (typeof window.save === 'function') {
            e.preventDefault();
            window.save();
          }
          break;
        case 'z':
          if (e.shiftKey && typeof window.redo === 'function') {
            e.preventDefault();
            window.redo();
          } else if (!e.shiftKey && typeof window.undo === 'function') {
            e.preventDefault();
            window.undo();
          }
          break;
      }
    }
  });
</script>