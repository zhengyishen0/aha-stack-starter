---
export interface Props {
  name?: string;
  value?: string;
  placeholder?: string;
  format?: string;
  disabled?: boolean;
  readonly?: boolean;
  class?: string;
  inputClass?: string;
  calendarClass?: string;
}

const { 
  name = 'date',
  value = '',
  placeholder = 'Select a date',
  format = 'Y-m-d',
  disabled = false,
  readonly = false,
  class: className = "",
  inputClass = "",
  calendarClass = ""
} = Astro.props;
---

<!-- 
Pine UI Date Picker Component

Usage:
<DatePicker 
  name="birthdate" 
  placeholder="Select your birthdate"
  format="Y-m-d"
  value="2023-12-25"
/>

<DatePicker 
  name="event_date" 
  placeholder="Event date"
  format="M j, Y"
  disabled={false}
  readonly={false}
/>

Features:
- Interactive calendar with month/year navigation
- Customizable date formatting
- Click outside to close
- Keyboard navigation (escape to close)
- Month and year selection
- Today button for quick selection
- Responsive design
- Alpine.js powered state management

Date Format Options:
- Y-m-d: 2023-12-25
- M j, Y: Dec 25, 2023
- m/d/Y: 12/25/2023
- j F Y: 25 December 2023
-->

<div 
  x-data="{
    datePickerOpen: false,
    datePickerValue: $persist('${value}'),
    datePickerFormat: '${format}',
    datePickerMonth: '',
    datePickerYear: '',
    datePickerDay: '',
    datePickerDaysInMonth: [],
    datePickerBlankDaysInMonth: [],
    datePickerMonthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
    datePickerDays: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],

    datePickerDayClicked(day) {
      let selectedDate = new Date(this.datePickerYear, this.datePickerMonth, day);
      this.datePickerDay = day;
      this.datePickerValue = this.datePickerFormatDate(selectedDate, this.datePickerFormat);
      this.datePickerOpen = false;
    },

    datePickerPreviousMonth() {
      if (this.datePickerMonth == 0) { 
        this.datePickerYear--; 
        this.datePickerMonth = 11; 
      } else { 
        this.datePickerMonth--; 
      }
      this.datePickerCalculateDays();
    },

    datePickerNextMonth() {
      if (this.datePickerMonth == 11) { 
        this.datePickerYear++; 
        this.datePickerMonth = 0; 
      } else { 
        this.datePickerMonth++; 
      }
      this.datePickerCalculateDays();
    },

    datePickerIsToday(day) {
      const today = new Date();
      const date = new Date(this.datePickerYear, this.datePickerMonth, day);
      return date.toDateString() === today.toDateString();
    },

    datePickerIsSelected(day) {
      const date = new Date(this.datePickerYear, this.datePickerMonth, day);
      return this.datePickerValue === this.datePickerFormatDate(date, this.datePickerFormat);
    },

    datePickerSetToday() {
      const today = new Date();
      this.datePickerMonth = today.getMonth();
      this.datePickerYear = today.getFullYear();
      this.datePickerDay = today.getDate();
      this.datePickerValue = this.datePickerFormatDate(today, this.datePickerFormat);
      this.datePickerCalculateDays();
      this.datePickerOpen = false;
    },

    datePickerCalculateDays() {
      let daysInMonth = new Date(this.datePickerYear, this.datePickerMonth + 1, 0).getDate();
      let dayOfWeek = new Date(this.datePickerYear, this.datePickerMonth).getDay();
      let blankdaysArray = [];
      let daysArray = [];

      for (let i = 1; i <= dayOfWeek; i++) {
        blankdaysArray.push(i);
      }

      for (let i = 1; i <= daysInMonth; i++) {
        daysArray.push(i);
      }
      
      this.datePickerBlankDaysInMonth = blankdaysArray;
      this.datePickerDaysInMonth = daysArray;
    },

    datePickerFormatDate(date, format) {
      let formattedDay = this.datePickerDays[date.getDay()];
      let formattedDate = ('0' + date.getDate()).slice(-2);
      let formattedMonth = ('0' + (date.getMonth() + 1)).slice(-2);
      let formattedMonthShortName = this.datePickerMonthNames[date.getMonth()].substring(0, 3);
      let formattedMonthFullName = this.datePickerMonthNames[date.getMonth()];
      let formattedYear = date.getFullYear();

      if (format === 'M j, Y') {
        return formattedMonthShortName + ' ' + parseInt(formattedDate) + ', ' + formattedYear;
      }
      if (format === 'm/d/Y') {
        return formattedMonth + '/' + formattedDate + '/' + formattedYear;
      }
      if (format === 'j F Y') {
        return parseInt(formattedDate) + ' ' + formattedMonthFullName + ' ' + formattedYear;
      }
      return formattedYear + '-' + formattedMonth + '-' + formattedDate;
    },

    init() {
      let today = new Date();
      if (this.datePickerValue) {
        let currentDate = new Date(Date.parse(this.datePickerValue));
        this.datePickerMonth = currentDate.getMonth();
        this.datePickerYear = currentDate.getFullYear();
        this.datePickerDay = currentDate.getDate();
      } else {
        this.datePickerMonth = today.getMonth();
        this.datePickerYear = today.getFullYear();
        this.datePickerDay = today.getDate();
      }
      this.datePickerValue = this.datePickerFormatDate(new Date(this.datePickerYear, this.datePickerMonth, this.datePickerDay), this.datePickerFormat);
      this.datePickerCalculateDays();
    }
  }"
  x-init="init()"
  @keydown.escape.window="datePickerOpen = false"
  class={`relative ${className}`}
>
  <!-- Input Field -->
  <div class="relative">
    <input 
      x-model="datePickerValue"
      @click="datePickerOpen = !datePickerOpen"
      type="text" 
      name={name}
      placeholder={placeholder}
      readonly={readonly}
      disabled={disabled}
      class={`w-full px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'} ${inputClass}`}
    />
    <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
      <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
      </svg>
    </div>
  </div>

  <!-- Calendar Dropdown -->
  <div 
    x-show="datePickerOpen" 
    @click.away="datePickerOpen = false"
    x-transition:enter="transition ease-out duration-100"
    x-transition:enter-start="transform opacity-0 scale-95"
    x-transition:enter-end="transform opacity-100 scale-100"
    x-transition:leave="transition ease-in duration-75"
    x-transition:leave-start="transform opacity-100 scale-100"
    x-transition:leave-end="transform opacity-0 scale-95"
    class={`absolute z-50 top-full left-0 mt-2 bg-white border border-gray-200 rounded-lg shadow-lg p-4 ${calendarClass}`}
    x-cloak
  >
    <!-- Calendar Header -->
    <div class="flex items-center justify-between mb-4">
      <button 
        @click="datePickerPreviousMonth()"
        type="button"
        class="p-1 hover:bg-gray-100 rounded transition-colors duration-200"
      >
        <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>
      
      <div class="text-lg font-semibold text-gray-800">
        <span x-text="datePickerMonthNames[datePickerMonth]"></span>
        <span x-text="datePickerYear"></span>
      </div>
      
      <button 
        @click="datePickerNextMonth()"
        type="button"
        class="p-1 hover:bg-gray-100 rounded transition-colors duration-200"
      >
        <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </button>
    </div>

    <!-- Days of Week Header -->
    <div class="grid grid-cols-7 mb-2">
      <template x-for="day in datePickerDays">
        <div class="px-2 py-1 text-xs font-medium text-center text-gray-500" x-text="day"></div>
      </template>
    </div>

    <!-- Calendar Grid -->
    <div class="grid grid-cols-7 gap-1">
      <!-- Blank days -->
      <template x-for="blankDay in datePickerBlankDaysInMonth">
        <div class="h-10 w-10"></div>
      </template>
      
      <!-- Active days -->
      <template x-for="(day, dayIndex) in datePickerDaysInMonth" :key="dayIndex">
        <button
          @click="datePickerDayClicked(day)"
          type="button"
          class="h-10 w-10 text-sm rounded-lg transition-colors duration-200 hover:bg-blue-100"
          :class="{
            'bg-blue-500 text-white hover:bg-blue-600': datePickerIsSelected(day),
            'bg-blue-100 text-blue-600': datePickerIsToday(day) && !datePickerIsSelected(day),
            'text-gray-700 hover:bg-gray-100': !datePickerIsSelected(day) && !datePickerIsToday(day)
          }"
          x-text="day"
        ></button>
      </template>
    </div>

    <!-- Today Button -->
    <div class="flex justify-center mt-4 pt-3 border-t border-gray-200">
      <button 
        @click="datePickerSetToday()"
        type="button"
        class="px-4 py-2 text-sm font-medium text-blue-600 bg-blue-50 rounded-md hover:bg-blue-100 transition-colors duration-200"
      >
        Today
      </button>
    </div>
  </div>
</div>