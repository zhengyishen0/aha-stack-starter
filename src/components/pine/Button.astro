---
export interface Props {
  variant?: 'solid' | 'outline' | 'soft' | 'ghost';
  color?: 'neutral' | 'blue' | 'red' | 'green' | 'yellow' | 'purple';
  size?: 'sm' | 'md' | 'lg' | 'xl';
  disabled?: boolean;
  type?: 'button' | 'submit' | 'reset';
  href?: string;
  target?: string;
  class?: string;
}

const { 
  variant = 'solid',
  color = 'neutral',
  size = 'md',
  disabled = false,
  type = 'button',
  href,
  target,
  class: className = ""
} = Astro.props;

// Generate class names using our design system
const getButtonClasses = () => {
  const baseClass = 'button';
  const sizeClass = `button-${size}`;
  const variantColorClass = `button-${variant}-${color}`;
  
  return `${baseClass} ${sizeClass} ${variantColorClass}`;
};
---

<!-- 
Pine UI Button Component

Usage:
<Button variant="solid" color="blue" size="md">Click me</Button>
<Button variant="outline" color="red" disabled>Disabled</Button>

Variants: solid, outline, soft, ghost
Colors: neutral, blue, red, green, yellow, purple
Sizes: sm, md, lg, xl
-->

{href ? (
  <a
    href={href}
    target={target}
    class={`${getButtonClasses()} ${disabled ? 'opacity-50 cursor-not-allowed pointer-events-none' : ''} ${className}`}
    style="text-decoration: none;"
  >
    <slot />
  </a>
) : (
  <button 
    type={type}
    disabled={disabled}
    class={`${getButtonClasses()} ${disabled ? 'opacity-50 cursor-not-allowed' : ''} ${className}`}
  >
    <slot />
  </button>
)}