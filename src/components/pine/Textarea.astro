---
export interface Props {
  placeholder?: string;
  value?: string;
  disabled?: boolean;
  readonly?: boolean;
  required?: boolean;
  name?: string;
  id?: string;
  label?: string;
  description?: string;
  error?: string;
  rows?: number;
  autoResize?: boolean;
  maxLength?: number;
  showCount?: boolean;
  variant?: 'default' | 'filled' | 'underlined';
  class?: string;
  textareaClass?: string;
}

const { 
  placeholder,
  value = '',
  disabled = false,
  readonly = false,
  required = false,
  name,
  id,
  label,
  description,
  error,
  rows = 4,
  autoResize = false,
  maxLength,
  showCount = false,
  variant = 'default',
  class: className = "",
  textareaClass = ""
} = Astro.props;

const variantClasses = {
  'default': 'border border-gray-300 rounded-md bg-white focus:border-blue-500 focus:ring-1 focus:ring-blue-500',
  'filled': 'border-0 rounded-md bg-gray-100 focus:bg-white focus:ring-2 focus:ring-blue-500',
  'underlined': 'border-0 border-b-2 border-gray-300 rounded-none bg-transparent focus:border-blue-500 focus:ring-0'
};
---

<!-- 
Pine UI Textarea Component

Usage:
<Textarea 
  label="Message"
  placeholder="Enter your message"
  required={true}
  autoResize={true}
  maxLength={500}
  showCount={true}
  name="message"
  rows={4}
/>

Features:
- Auto-resize functionality
- Character count display
- Multiple variants
- Label and description support
- Error state handling
- Disabled/readonly states
-->

<div 
  {autoResize ? `x-data="{
    textareaValue: '${value}',
    resize() {
      $el.style.height = 'auto';
      $el.style.height = $el.scrollHeight + 'px';
    }
  }"` : ''}
  class={`w-full ${className}`}
>
  <!-- Label -->
  {label && (
    <label 
      for={id}
      class={`block text-sm font-medium text-gray-700 mb-1 ${disabled ? 'opacity-50' : ''}`}
    >
      {label}
      {required && <span class="text-red-500 ml-1">*</span>}
    </label>
  )}
  
  <!-- Textarea -->
  <textarea 
    id={id}
    name={name}
    placeholder={placeholder}
    disabled={disabled}
    readonly={readonly}
    required={required}
    rows={rows}
    maxlength={maxLength}
    {autoResize ? 'x-model="textareaValue"' : ''}
    {autoResize ? 'x-init="resize()"' : ''}
    {autoResize ? '@input="resize()"' : ''}
    class={`w-full px-3 py-2 text-sm transition-colors duration-200 focus:outline-none resize-none ${variantClasses[variant]} ${
      error 
        ? 'border-red-500 focus:border-red-500 focus:ring-red-500' 
        : ''
    } ${disabled ? 'opacity-50 cursor-not-allowed bg-gray-50' : ''} ${
      readonly ? 'bg-gray-50' : ''
    } ${textareaClass}`}
  >{value}</textarea>
  
  <!-- Character count -->
  {showCount && maxLength && (
    <div class="flex justify-end mt-1">
      <span 
        {autoResize ? 'x-text="`${textareaValue.length}/${maxLength}`"' : `class="text-xs text-gray-500"`}
        class="text-xs text-gray-500"
      >
        {!autoResize && `${value.length}/${maxLength}`}
      </span>
    </div>
  )}
  
  <!-- Description -->
  {description && !error && (
    <p class={`mt-1 text-xs text-gray-500 ${disabled ? 'opacity-50' : ''}`}>
      {description}
    </p>
  )}
  
  <!-- Error message -->
  {error && (
    <p class="mt-1 text-xs text-red-500 flex items-center">
      <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
      </svg>
      {error}
    </p>
  )}
</div>