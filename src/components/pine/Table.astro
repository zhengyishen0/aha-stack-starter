---
export interface Props {
  headers: string[];
  rows: (string | number)[][];
  striped?: boolean;
  bordered?: boolean;
  hover?: boolean;
  responsive?: boolean;
  compact?: boolean;
  class?: string;
}

const { 
  headers,
  rows,
  striped = false,
  bordered = false,
  hover = false,
  responsive = true,
  compact = false,
  class: className = ""
} = Astro.props;

const getComponentClasses = () => {
  const baseClass = 'table';
  const variantClasses = [];
  
  if (bordered) variantClasses.push('table-bordered');
  if (compact) variantClasses.push('table-compact');
  if (striped) variantClasses.push('table-striped');
  if (hover) variantClasses.push('table-hover');
  
  return `${baseClass} ${variantClasses.join(' ')} ${className}`.trim();
};

const getHeaderClasses = () => {
  const baseClass = 'table-header';
  const variantClass = compact ? 'table-header-compact' : '';
  return `${baseClass} ${variantClass}`.trim();
};

const getRowClasses = () => {
  return 'table-row';
};

const getCellClasses = () => {
  const baseClass = 'table-cell';
  const variantClass = compact ? 'table-cell-compact' : '';
  return `${baseClass} ${variantClass}`.trim();
};
---

<!-- 
Pine UI Table Component

Usage:
<Table 
  headers={['Name', 'Email', 'Role']}
  rows={[
    ['John Doe', 'john@example.com', 'Admin'],
    ['Jane Smith', 'jane@example.com', 'User']
  ]}
  striped
  hover
  responsive
/>

Props:
- headers: Array of header strings
- rows: Array of row data (each row is an array of strings/numbers)
- striped: Alternating row background colors
- bordered: Add borders to table and cells
- hover: Add hover effect on rows
- responsive: Enable horizontal scrolling on small screens
- compact: Reduce padding for compact view
- class: Additional CSS classes
-->

{responsive ? (
  <div class="table-container">
    <table class={getComponentClasses()}>
      <thead class="table-thead">
        <tr>
          {headers.map((header) => (
            <th scope="col" class={getHeaderClasses()}>
              {header}
            </th>
          ))}
        </tr>
      </thead>
      <tbody class="table-tbody">
        {rows.map((row) => (
          <tr class={getRowClasses()}>
            {row.map((cell) => (
              <td class={getCellClasses()}>
                {cell}
              </td>
            ))}
          </tr>
        ))}
      </tbody>
    </table>
  </div>
) : (
  <table class={getComponentClasses()}>
    <thead class="table-thead">
      <tr>
        {headers.map((header) => (
          <th scope="col" class={getHeaderClasses()}>
            {header}
          </th>
        ))}
      </tr>
    </thead>
    <tbody class="table-tbody">
      {rows.map((row) => (
        <tr class={getRowClasses()}>
          {row.map((cell) => (
            <td class={getCellClasses()}>
              {cell}
            </td>
          ))}
        </tr>
      ))}
    </tbody>
  </table>
)}