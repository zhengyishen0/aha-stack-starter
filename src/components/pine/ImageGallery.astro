---
export interface Props {
  images: Array<{
    src: string;
    alt?: string;
    thumbnail?: string;
    caption?: string;
  }>;
  columns?: 2 | 3 | 4 | 5 | 6;
  gap?: 'sm' | 'md' | 'lg';
  aspectRatio?: 'square' | 'video' | 'photo' | 'auto';
  class?: string;
  thumbnailClass?: string;
  lightboxClass?: string;
}

const { 
  images = [],
  columns = 3,
  gap = 'md',
  aspectRatio = 'square',
  class: className = "",
  thumbnailClass = "",
  lightboxClass = ""
} = Astro.props;

// Ensure images is always an array with valid data
const safeImages = Array.isArray(images) ? images.filter(img => img && img.src) : [];

// Generate class names using our design system
const getComponentClasses = () => {
  const baseClass = 'image-gallery';
  const gridClass = `image-gallery-grid image-gallery-grid-${columns}`;
  const gapClass = `image-gallery-gap-${gap}`;
  
  return `${baseClass} ${gridClass} ${gapClass}`;
};

const getItemClasses = () => {
  const baseClass = 'image-gallery-item';
  const aspectClass = aspectRatio !== 'auto' ? `image-gallery-item-${aspectRatio}` : 'image-gallery-item-auto';
  
  return `${baseClass} ${aspectClass}`;
};
---

<div 
  x-data="imageGalleryData"
  @image-gallery-next.window="imageGalleryNext()" 
  @image-gallery-prev.window="imageGalleryPrev()" 
  @keyup.right.window="imageGalleryNext();" 
  @keyup.left.window="imageGalleryPrev();"
  @keyup.escape.window="imageGalleryClose();"
  class={`${getComponentClasses()} ${className}`}
  data-images={JSON.stringify(safeImages)}
>
  <!-- Image Grid -->
  {safeImages.length === 0 ? (
    <div class="image-gallery-empty">
      <p class="image-gallery-empty-message">No images to display</p>
    </div>
  ) : (
    <ul x-ref="gallery" class="image-gallery-list">
      {safeImages.map((image, index) => (
        <li class={`${getItemClasses()} ${thumbnailClass}`}>
          <img 
            src={image.thumbnail || image.src}
            alt={image.alt || `Gallery image ${index + 1}`}
            class="image-gallery-thumbnail"
            loading="lazy"
            data-index={index + 1}
            @click="imageGalleryOpen"
          />
          {image.caption && (
            <div class="image-gallery-caption">
              <p class="image-gallery-caption-text">{image.caption}</p>
            </div>
          )}
        </li>
      ))}
    </ul>
  )}

  <!-- Lightbox Modal -->
  <template x-teleport="body">
    <div 
      x-show="imageGalleryOpened" 
      x-transition.opacity.duration.300
      class={`image-gallery-modal ${lightboxClass}`}
      @click.self="imageGalleryClose()"
      style="display: none;"
    >
      <!-- Close button -->
      <button 
        @click="imageGalleryClose()"
        class="image-gallery-nav image-gallery-nav-close"
        type="button"
      >
        <svg class="image-gallery-nav-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>

      <!-- Previous button -->
      <button 
        @click="imageGalleryPrev()"
        x-show="imageGalleryImageIndex > 1"
        class="image-gallery-nav image-gallery-nav-prev"
        type="button"
      >
        <svg class="image-gallery-nav-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>

      <!-- Next button -->
      <button 
        @click="imageGalleryNext()"
        x-show="imageGalleryImageIndex < imageGallery.length"
        class="image-gallery-nav image-gallery-nav-next"
        type="button"
      >
        <svg class="image-gallery-nav-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </button>

      <!-- Image container -->
      <div 
        x-show="imageGalleryOpened"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0 scale-95"
        x-transition:enter-end="opacity-100 scale-100"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-100 scale-100"
        x-transition:leave-end="opacity-0 scale-95"
        class="image-gallery-modal-content"
      >
        <img 
          x-show="imageGalleryActiveUrl"
          :src="imageGalleryActiveUrl" 
          :alt="imageGallery[imageGalleryImageIndex - 1]?.alt || 'Gallery image'"
          class="image-gallery-modal-image"
        />
        
        <!-- Image counter -->
        <div class="image-gallery-modal-counter">
          <span class="image-gallery-modal-counter-text">
            <span x-text="imageGalleryImageIndex"></span>
            /
            <span x-text="imageGallery.length"></span>
          </span>
        </div>
      </div>
    </div>
  </template>
</div>

<script define:vars={{ safeImages }}>
  const imageGalleryData = {
    imageGalleryOpened: false,
    imageGalleryActiveUrl: null,
    imageGalleryImageIndex: null,
    imageGallery: safeImages,
    imageGalleryOpen(event) {
      this.imageGalleryImageIndex = event.target.dataset.index;
      this.imageGalleryActiveUrl = event.target.src;
      this.imageGalleryOpened = true;
    },
    imageGalleryClose() {
      this.imageGalleryOpened = false;
      setTimeout(() => this.imageGalleryActiveUrl = null, 300);
    },
    imageGalleryNext() {
      this.imageGalleryImageIndex = (this.imageGalleryImageIndex == this.imageGallery.length) ? 1 : (parseInt(this.imageGalleryImageIndex) + 1);
      this.imageGalleryActiveUrl = this.$refs.gallery.querySelector('[data-index="' + this.imageGalleryImageIndex + '"]').src;
    },
    imageGalleryPrev() {
      this.imageGalleryImageIndex = (this.imageGalleryImageIndex == 1) ? this.imageGallery.length : (parseInt(this.imageGalleryImageIndex) - 1);
      this.imageGalleryActiveUrl = this.$refs.gallery.querySelector('[data-index="' + this.imageGalleryImageIndex + '"]').src;
    }
  };
</script>