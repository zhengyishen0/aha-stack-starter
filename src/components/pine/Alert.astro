---
export interface Props {
  variant?: 'default' | 'blue' | 'red' | 'green' | 'yellow' | 'soft-blue' | 'soft-red' | 'soft-green' | 'soft-yellow';
  title?: string;
  icon?: string;
  class?: string;
  dismissible?: boolean;
}

const { 
  variant = 'default', 
  title, 
  icon, 
  class: className = "",
  dismissible = false 
} = Astro.props;

const variantClasses = {
  'default': 'bg-white border-neutral-200 text-neutral-900',
  'blue': 'bg-blue-600 border-blue-600 text-white',
  'red': 'bg-red-600 border-red-600 text-white',
  'green': 'bg-green-500 border-green-500 text-white',
  'yellow': 'bg-yellow-500 border-yellow-500 text-white',
  'soft-blue': 'bg-blue-50 border-blue-200 text-blue-800',
  'soft-red': 'bg-red-50 border-red-200 text-red-800',
  'soft-green': 'bg-green-50 border-green-200 text-green-800',
  'soft-yellow': 'bg-yellow-50 border-yellow-200 text-yellow-800',
};
---

<!-- 
Pine UI Alert Component

Usage:
<Alert 
  variant="blue" 
  title="Information" 
  dismissible={true}
>
  This is an informational alert message.
</Alert>

Variants: default, blue, red, green, yellow, soft-blue, soft-red, soft-green, soft-yellow
Features:
- Optional dismissible functionality
- Custom icons
- Multiple color variants
-->

<div 
  {dismissible ? 'x-data="{ alertVisible: true }"' : ''}
  {dismissible ? 'x-show="alertVisible"' : ''}
  class={`relative w-full rounded-lg border p-4 ${variantClasses[variant]} ${className} ${icon ? '[&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&:has(svg)]:pl-11' : ''}`}
>
  {icon && (
    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <Fragment set:html={icon} />
    </svg>
  )}
  
  {dismissible && (
    <button 
      @click="alertVisible = false"
      class="absolute top-4 right-4 text-current hover:opacity-70"
      type="button"
    >
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
  )}
  
  {title && (
    <h5 class="mb-1 font-medium leading-none tracking-tight">
      {title}
    </h5>
  )}
  
  <div class={title ? "text-sm opacity-70" : ""}>
    <slot />
  </div>
</div>