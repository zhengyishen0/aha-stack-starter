---
export interface Props {
  type?: 'text' | 'email' | 'password' | 'number' | 'tel' | 'url' | 'search';
  placeholder?: string;
  value?: string;
  disabled?: boolean;
  readonly?: boolean;
  required?: boolean;
  name?: string;
  id?: string;
  label?: string;
  description?: string;
  error?: string;
  size?: 'sm' | 'md' | 'lg';
  variant?: 'default' | 'filled' | 'underlined';
  class?: string;
  inputClass?: string;
}

const { 
  type = 'text',
  placeholder,
  value = '',
  disabled = false,
  readonly = false,
  required = false,
  name,
  id,
  label,
  description,
  error,
  size = 'md',
  variant = 'default',
  class: className = "",
  inputClass = ""
} = Astro.props;

const getInputClasses = () => {
  const baseClass = 'input';
  const sizeClass = size !== 'md' ? `input--${size}` : '';
  const variantClass = variant !== 'default' ? `input--${variant}` : '';
  const stateClass = error ? 'input--error' : '';
  const disabledClass = disabled ? 'input--disabled' : '';
  const readonlyClass = readonly ? 'input--readonly' : '';
  
  return [baseClass, sizeClass, variantClass, stateClass, disabledClass, readonlyClass]
    .filter(Boolean)
    .join(' ');
};
---

<!-- 
Pine UI Text Input Component

Usage:
<TextInput 
  type="email"
  label="Email Address"
  placeholder="Enter your email"
  required={true}
  description="We'll never share your email"
  name="email"
/>

Features:
- Multiple input types
- Various sizes and variants
- Label and description support
- Error state handling
- Disabled/readonly states
- Focus management
-->

<div class={`form-field ${className}`}>
  <!-- Label -->
  {label && (
    <label 
      for={id}
      class={`form-label ${disabled ? 'form-label--disabled' : ''}`}
    >
      {label}
      {required && <span class="form-required">*</span>}
    </label>
  )}
  
  <!-- Input -->
  <input 
    type={type}
    id={id}
    name={name}
    placeholder={placeholder}
    value={value}
    disabled={disabled}
    readonly={readonly}
    required={required}
    class={`${getInputClasses()} ${inputClass}`}
  />
  
  <!-- Description -->
  {description && !error && (
    <p class={`form-description ${disabled ? 'form-description--disabled' : ''}`}>
      {description}
    </p>
  )}
  
  <!-- Error message -->
  {error && (
    <p class="form-error">
      <svg class="form-error-icon" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
      </svg>
      {error}
    </p>
  )}
</div>