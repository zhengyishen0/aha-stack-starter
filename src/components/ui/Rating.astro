---
export interface Props {
  maxStars?: number;
  initialValue?: number;
  disabled?: boolean;
  readonly?: boolean;
  size?: 'sm' | 'md' | 'lg';
  name?: string;
  class?: string;
}

const { 
  maxStars = 5,
  initialValue = 0,
  disabled = false,
  readonly = false,
  size = 'md',
  name,
  class: className = ""
} = Astro.props;

// Generate class names using our design system
const getRatingClasses = () => {
  const baseClass = 'rating';
  const readonlyClass = readonly ? 'rating-readonly' : '';
  
  return `${baseClass} ${readonlyClass}`.trim();
};

const getStarClasses = () => {
  const baseClass = 'rating-star';
  const sizeClass = `rating-star-${size}`;
  
  return `${baseClass} ${sizeClass}`;
};
---

<!-- 
Pine UI Rating Component

Usage:
<Rating 
  maxStars={5}
  initialValue={3}
  disabled={false}
  readonly={false}
  size="md"
  name="rating"
/>

Features:
- Configurable star count
- Hover effects
- Click to rate
- Reset functionality
- Disabled/readonly states
- Alpine.js powered
-->

<div 
  x-data={`{
    disabled: ${disabled},
    readonly: ${readonly},
    maxStars: ${maxStars},
    stars: 0,
    value: ${initialValue},
    
    hoverStar(star) {
      if (this.disabled || this.readonly) return;
      this.stars = star;
    },
    
    mouseLeftStar() {
      if (this.disabled || this.readonly) return;
      this.stars = this.value;
    },
    
    rate(star) {
      if (this.disabled || this.readonly) return;
      this.value = star;
      this.stars = star;
      if (this.$refs.hiddenInput) {
        this.$refs.hiddenInput.value = star;
        this.$refs.hiddenInput.dispatchEvent(new Event('change'));
      }
    },
    
    reset() {
      if (this.disabled || this.readonly) return;
      this.value = 0;
      this.stars = 0;
      if (this.$refs.hiddenInput) {
        this.$refs.hiddenInput.value = 0;
        this.$refs.hiddenInput.dispatchEvent(new Event('change'));
      }
    }
  }`}
  x-init="stars = value"
  class={`${getRatingClasses()} ${className}`}
>
  <!-- Hidden input for form submission -->
  {name && (
    <input 
      x-ref="hiddenInput"
      type="hidden" 
      name={name}
      :value="value"
    />
  )}
  
  <!-- Stars -->
  <template x-for="star in maxStars" :key="star">
    <button 
      @click="rate(star)"
      @mouseenter="hoverStar(star)"
      @mouseleave="mouseLeftStar()"
      :disabled="disabled"
      class={getStarClasses()}
      type="button"
    >
      <svg 
        :class="{
          'rating-star-filled': (stars >= star) || (value >= star && stars === 0),
          'rating-star-empty': (stars < star) && (value < star || stars > 0)
        }"
        fill="currentColor" 
        viewBox="0 0 20 20"
      >
        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
      </svg>
    </button>
  </template>
  
  <!-- Reset button -->
  {!readonly && !disabled && (
    <button 
      @click="reset()"
      class="rating-reset"
      type="button"
    >
      Reset
    </button>
  )}
  
  <!-- Current rating display -->
  <span class="rating-display" x-text="`${value}/${maxStars}`"></span>
</div>