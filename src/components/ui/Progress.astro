---
export interface Props {
  value?: number;
  max?: number;
  animated?: boolean;
  striped?: boolean;
  color?: 'blue' | 'green' | 'red' | 'yellow' | 'purple' | 'gray';
  size?: 'sm' | 'md' | 'lg';
  showLabel?: boolean;
  autoIncrement?: boolean;
  incrementInterval?: number;
  class?: string;
}

const { 
  value = 0,
  max = 100,
  animated = false,
  striped = false,
  color = 'blue',
  size = 'md',
  showLabel = false,
  autoIncrement = false,
  incrementInterval = 100,
  class: className = ""
} = Astro.props;

// Generate class names using our design system
const getProgressClasses = () => {
  const baseClass = 'progress';
  const sizeClass = `progress-${size}`;
  const colorClass = `progress-${color}`;
  const variantClasses = [];
  
  if (striped) variantClasses.push('progress-striped');
  if (animated) variantClasses.push('progress-animated');
  
  return `${baseClass} ${sizeClass} ${colorClass} ${variantClasses.join(' ')} ${className}`.trim();
};
---

<!-- 
Pine UI Progress Component

Usage:
<Progress 
  value={75}
  max={100}
  animated={true}
  striped={true}
  color="blue"
  size="md"
  showLabel={true}
/>

<Progress 
  autoIncrement={true}
  incrementInterval={100}
  color="green"
/>

Features:
- Native HTML progress element
- Configurable progress value
- Multiple colors and sizes
- Animated and striped variants
- Auto-increment functionality
- Optional labels
- Alpine.js powered
-->

<div 
  x-data={`{
    progress: ${value},
    max: ${max},
    autoIncrement: ${autoIncrement},
    incrementInterval: ${incrementInterval},
    progressInterval: null,
    
    get percentage() {
      return Math.min((this.progress / this.max) * 100, 100);
    },
    
    startAutoIncrement() {
      if (!this.autoIncrement) return;
      
      this.progressInterval = setInterval(() => {
        if (this.progress < this.max) {
          this.progress += 1;
        } else {
          clearInterval(this.progressInterval);
        }
      }, this.incrementInterval);
    },
    
    resetProgress() {
      this.progress = 0;
      if (this.progressInterval) {
        clearInterval(this.progressInterval);
      }
      if (this.autoIncrement) {
        this.startAutoIncrement();
      }
    }
  }`}
  x-init="
    if (autoIncrement) {
      startAutoIncrement();
    }
  "
  class="progress-wrapper"
>
  <!-- Progress label -->
  {showLabel && (
    <div class="progress-label-container">
      <span class="progress-label">Progress</span>
      <span class="progress-value" x-text="`${Math.round(percentage)}%`"></span>
    </div>
  )}
  
  <!-- Native progress element with custom styling overlay -->
  <div class="progress-container">
    <progress 
      :value="progress"
      :max="max"
      class={getProgressClasses()}
      x-cloak
    >
      <span x-text="`${Math.round(percentage)}%`"></span>
    </progress>
    
    <!-- Custom overlay for advanced styling (striped, animated) -->
    {(striped || animated) && (
      <div class="progress-overlay">
        <div 
          :style="`width: ${percentage}%`"
          class={`progress-bar ${striped ? 'progress-bar-striped' : ''} ${animated ? 'progress-bar-animated' : ''} progress-bar-${color}`}
        >
          <div class="progress-inner-glow"></div>
        </div>
      </div>
    )}
  </div>
  
  <!-- Auto-increment controls -->
  {autoIncrement && (
    <div class="progress-controls">
      <button 
        @click="resetProgress()"
        class="button button-sm button-soft-neutral"
        type="button"
      >
        Reset
      </button>
    </div>
  )}
</div>