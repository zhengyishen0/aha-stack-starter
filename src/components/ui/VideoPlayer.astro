---
export interface Props {
  id?: string;
  src?: string;
  sources?: Array<{ src: string; type: string; label?: string; }>;
  poster?: string;
  width?: string | number;
  height?: string | number;
  autoplay?: boolean;
  loop?: boolean;
  muted?: boolean;
  controls?: boolean;
  class?: string;
  containerClass?: string;
  showControls?: boolean;
  showFullscreen?: boolean;
  showVolumeControl?: boolean;
  showProgress?: boolean;
  showTime?: boolean;
  showPlaybackSpeed?: boolean;
}

const { 
  id = `video-player-${Math.random().toString(36).substring(2, 11)}`,
  src,
  sources = [],
  poster,
  width = "100%",
  height = "auto",
  autoplay = false,
  loop = false,
  muted = false,
  controls = false,
  class: className = "",
  containerClass = "",
  showControls = true,
  showFullscreen = true,
  showVolumeControl = true,
  showProgress = true,
  showTime = true,
  showPlaybackSpeed = true
} = Astro.props;

// Build video sources array
const videoSources = src ? [{ src, type: 'video/mp4' }, ...sources] : sources;
---

<!-- 
Pine UI VideoPlayer Component

Usage:
<VideoPlayer 
  src="/path/to/video.mp4"
  poster="/path/to/poster.jpg"
  width="800"
  height="450"
  showControls={true}
  showFullscreen={true}
/>

Or with multiple sources:
<VideoPlayer 
  sources={[
    { src: "/video.mp4", type: "video/mp4", label: "HD" },
    { src: "/video.webm", type: "video/webm", label: "HD" }
  ]}
  poster="/poster.jpg"
/>

Features:
- Custom video controls
- Play/pause functionality
- Volume control with mute
- Progress bar with seeking
- Fullscreen support
- Time display (current/duration)
- Playback speed control
- Keyboard shortcuts (Space, M, F, Arrow keys)
- Alpine.js powered
- Responsive design
- Accessible with ARIA attributes

Props:
- id: string - Unique identifier for the video player
- src: string - Single video source URL
- sources: Array - Multiple video sources with type and label
- poster: string - Poster image URL
- width: string | number - Video width
- height: string | number - Video height
- autoplay: boolean - Auto-play video (default: false)
- loop: boolean - Loop video (default: false)
- muted: boolean - Mute video by default (default: false)
- controls: boolean - Show native browser controls (default: false)
- class: string - Additional CSS classes for the video element
- containerClass: string - Additional CSS classes for the container
- showControls: boolean - Show custom controls (default: true)
- showFullscreen: boolean - Show fullscreen button (default: true)
- showVolumeControl: boolean - Show volume control (default: true)
- showProgress: boolean - Show progress bar (default: true)
- showTime: boolean - Show time display (default: true)
- showPlaybackSpeed: boolean - Show playback speed control (default: true)

Keyboard Shortcuts:
- Space: Play/Pause
- M: Toggle Mute
- F: Toggle Fullscreen
- Left Arrow: Seek backward 10 seconds
- Right Arrow: Seek forward 10 seconds
- Up Arrow: Increase volume
- Down Arrow: Decrease volume
-->

<figure 
  x-data="{
    playing: false,
    muted: ${muted},
    volume: 1,
    currentTime: 0,
    duration: 0,
    buffered: 0,
    fullscreen: false,
    showVolumeSlider: false,
    playbackRate: 1,
    showSpeedMenu: false,
    loading: true,
    
    init() {
      this.video = this.$refs.video;
      this.muted = this.video.muted;
      this.volume = this.video.volume;
      
      // Event listeners
      this.video.addEventListener('loadedmetadata', () => {
        this.duration = this.video.duration;
        this.loading = false;
      });
      
      this.video.addEventListener('timeupdate', () => {
        this.currentTime = this.video.currentTime;
        if (this.video.buffered.length > 0) {
          this.buffered = this.video.buffered.end(this.video.buffered.length - 1);
        }
      });
      
      this.video.addEventListener('play', () => this.playing = true);
      this.video.addEventListener('pause', () => this.playing = false);
      this.video.addEventListener('volumechange', () => {
        this.volume = this.video.volume;
        this.muted = this.video.muted;
      });
      
      this.video.addEventListener('ratechange', () => {
        this.playbackRate = this.video.playbackRate;
      });
      
      this.video.addEventListener('error', (e) => {
        console.error('Video error:', e);
        this.loading = false;
      });
      
      this.video.addEventListener('loadstart', () => {
        this.loading = true;
      });
      
      this.video.addEventListener('canplay', () => {
        this.loading = false;
      });
      
      // Fullscreen events
      document.addEventListener('fullscreenchange', () => {
        this.fullscreen = !!document.fullscreenElement;
      });
      
      // Keyboard shortcuts
      this.$el.addEventListener('keydown', (e) => {
        if (e.target.tagName === 'INPUT') return;
        
        switch(e.code) {
          case 'Space':
            e.preventDefault();
            this.togglePlay();
            break;
          case 'KeyM':
            e.preventDefault();
            this.toggleMute();
            break;
          case 'KeyF':
            e.preventDefault();
            this.toggleFullscreen();
            break;
          case 'ArrowLeft':
            e.preventDefault();
            this.seek(this.currentTime - 10);
            break;
          case 'ArrowRight':
            e.preventDefault();
            this.seek(this.currentTime + 10);
            break;
          case 'ArrowUp':
            e.preventDefault();
            this.setVolume(Math.min(1, this.volume + 0.1));
            break;
          case 'ArrowDown':
            e.preventDefault();
            this.setVolume(Math.max(0, this.volume - 0.1));
            break;
        }
      });
    },
    
    togglePlay() {
      if (this.playing) {
        this.video.pause();
      } else {
        this.video.play();
      }
    },
    
    toggleMute() {
      this.video.muted = !this.video.muted;
    },
    
    setVolume(value) {
      this.video.volume = value;
      this.video.muted = value === 0;
    },
    
    seek(time) {
      this.video.currentTime = Math.max(0, Math.min(this.duration, time));
    },
    
    seekToPercentage(percentage) {
      this.seek(this.duration * percentage / 100);
    },
    
    setPlaybackRate(rate) {
      this.video.playbackRate = rate;
      this.showSpeedMenu = false;
    },
    
    toggleFullscreen() {
      if (this.fullscreen) {
        document.exitFullscreen();
      } else {
        this.$el.requestFullscreen();
      }
    },
    
    formatTime(seconds) {
      const mins = Math.floor(seconds / 60);
      const secs = Math.floor(seconds % 60);
      return `${mins}:${secs.toString().padStart(2, '0')}`;
    },
    
    getProgressPercentage() {
      return this.duration ? (this.currentTime / this.duration) * 100 : 0;
    },
    
    getBufferedPercentage() {
      return this.duration ? (this.buffered / this.duration) * 100 : 0;
    }
  }"
  class={`video-player ${containerClass}`}
  style={`width: ${typeof width === 'number' ? width + 'px' : width}; ${height !== 'auto' ? `height: ${typeof height === 'number' ? height + 'px' : height}` : ''}`}
  tabindex="0"
>
  <!-- Video Element -->
  <video
    x-ref="video"
    class={`video-player-video ${className}`}
    poster={poster}
    autoplay={autoplay}
    loop={loop}
    muted={muted}
    controls={controls}
    playsinline={true}
    preload="metadata"
    crossorigin="anonymous"
  >
    {videoSources.map(source => (
      <source src={source.src} type={source.type} />
    ))}
    Your browser does not support the video tag.
  </video>
  
  <!-- Loading Spinner -->
  <div 
    x-show="loading" 
    class="video-player-loading"
  >
    <div class="video-player-loading-spinner"></div>
  </div>
  
  <!-- Custom Controls -->
  {showControls && (
    <div 
      class="video-player-controls"
      :class="{ 'video-player-controls-hidden': !showVolumeSlider && !showSpeedMenu }"
    >
      <!-- Progress Bar -->
      {showProgress && (
        <div class="video-player-progress-container">
          <div 
            class="video-player-progress"
            @click="seekToPercentage(($event.offsetX / $el.offsetWidth) * 100)"
          >
            <!-- Buffered Progress -->
            <div 
              class="video-player-progress-buffered"
              :style="`width: ${getBufferedPercentage()}%`"
            ></div>
            <!-- Current Progress -->
            <div 
              class="video-player-progress-current"
              :style="`width: ${getProgressPercentage()}%`"
            ></div>
            <!-- Scrubber -->
            <div 
              class="video-player-progress-scrubber"
              :style="`left: calc(${getProgressPercentage()}% - 6px)`"
            ></div>
          </div>
        </div>
      )}
      
      <!-- Control Bar -->
      <div class="video-player-control-bar">
        <div class="video-player-control-group">
          <!-- Play/Pause Button -->
          <button 
            @click="togglePlay()"
            class="video-player-button video-player-button-play"
            aria-label="Play/Pause"
          >
            <svg x-show="!playing" class="video-player-icon" fill="currentColor" viewBox="0 0 24 24">
              <path d="M8 5v14l11-7z"/>
            </svg>
            <svg x-show="playing" class="video-player-icon" fill="currentColor" viewBox="0 0 24 24">
              <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>
            </svg>
          </button>
          
          <!-- Volume Control -->
          {showVolumeControl && (
            <div class="video-player-volume" x-data="{ hover: false }" @mouseenter="hover = true" @mouseleave="hover = false; showVolumeSlider = false">
              <button 
                @click="toggleMute()"
                @mouseenter="showVolumeSlider = true"
                class="video-player-button"
                aria-label="Toggle Mute"
              >
                <svg x-show="!muted && volume > 0.5" class="video-player-icon-sm" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z"/>
                </svg>
                <svg x-show="!muted && volume <= 0.5 && volume > 0" class="video-player-icon-sm" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M18.5 12c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM5 9v6h4l5 5V4L9 9H5z"/>
                </svg>
                <svg x-show="muted || volume === 0" class="video-player-icon-sm" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z"/>
                </svg>
              </button>
              
              <!-- Volume Slider -->
              <div 
                x-show="showVolumeSlider || hover"
                x-transition:enter="transition ease-out duration-200"
                x-transition:enter-start="opacity-0 scale-95"
                x-transition:enter-end="opacity-100 scale-100"
                x-transition:leave="transition ease-in duration-150"
                x-transition:leave-start="opacity-100 scale-100"
                x-transition:leave-end="opacity-0 scale-95"
                class="video-player-volume-slider-container"
                @mouseenter="showVolumeSlider = true"
              >
                <input 
                  type="range" 
                  min="0" 
                  max="1" 
                  step="0.1"
                  :value="volume"
                  @input="setVolume($event.target.value)"
                  class="video-player-volume-slider"
                />
              </div>
            </div>
          )}
          
          <!-- Time Display -->
          {showTime && (
            <div class="video-player-time">
              <span x-text="formatTime(currentTime)">0:00</span>
              <span class="video-player-time-separator"> / </span>
              <span x-text="formatTime(duration)">0:00</span>
            </div>
          )}
        </div>
        
        <div class="video-player-control-group">
          <!-- Playback Speed -->
          {showPlaybackSpeed && (
            <div class="video-player-speed" x-data="{ hover: false }" @mouseenter="hover = true" @mouseleave="hover = false; showSpeedMenu = false">
              <button 
                @click="showSpeedMenu = !showSpeedMenu"
                @mouseenter="showSpeedMenu = true"
                class="video-player-button video-player-button-speed"
              >
                <span x-text="`${playbackRate}x`">1x</span>
              </button>
              
              <!-- Speed Menu -->
              <div 
                x-show="showSpeedMenu || hover"
                x-transition:enter="transition ease-out duration-200"
                x-transition:enter-start="opacity-0 scale-95 translate-y-2"
                x-transition:enter-end="opacity-100 scale-100 translate-y-0"
                x-transition:leave="transition ease-in duration-150"
                x-transition:leave-start="opacity-100 scale-100 translate-y-0"
                x-transition:leave-end="opacity-0 scale-95 translate-y-2"
                class="video-player-speed-menu"
                @mouseenter="showSpeedMenu = true"
              >
                {[0.25, 0.5, 0.75, 1, 1.25, 1.5, 2].map(speed => (
                  <button 
                    @click={`setPlaybackRate(${speed})`}
                    class="video-player-speed-option"
                    :class={`{ 'video-player-speed-option-active': playbackRate === ${speed} }`}
                  >
                    {speed}x
                  </button>
                ))}
              </div>
            </div>
          )}
          
          <!-- Fullscreen Button -->
          {showFullscreen && (
            <button 
              @click="toggleFullscreen()"
              class="video-player-button video-player-fullscreen"
              aria-label="Toggle Fullscreen"
            >
              <svg x-show="!fullscreen" class="video-player-icon-sm" fill="currentColor" viewBox="0 0 24 24">
                <path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/>
              </svg>
              <svg x-show="fullscreen" class="video-player-icon-sm" fill="currentColor" viewBox="0 0 24 24">
                <path d="M5 16h3v3h2v-5H5v2zm3-8H5v2h5V5H8v3zm6 11h2v-3h3v-2h-5v5zm2-11V5h-2v5h5V8h-3z"/>
              </svg>
            </button>
          )}
        </div>
      </div>
    </div>
  )}
  
  <!-- Click to Play Overlay -->
  <div 
    x-show="!playing && !loading"
    @click="togglePlay()"
    class="video-player-overlay"
  >
    <div class="video-player-overlay-play">
      <svg class="video-player-icon-lg" fill="currentColor" viewBox="0 0 24 24">
        <path d="M8 5v14l11-7z"/>
      </svg>
    </div>
  </div>
</figure>