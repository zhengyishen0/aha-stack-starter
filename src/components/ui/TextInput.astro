---
// Import component styles
import '../../styles/components/text-input.css';

export interface Props {
  type?: 'text' | 'email' | 'password' | 'number' | 'tel' | 'url' | 'search';
  placeholder?: string;
  value?: string;
  disabled?: boolean;
  readonly?: boolean;
  required?: boolean;
  name?: string;
  id?: string;
  label?: string;
  description?: string;
  error?: string;
  context?: 'default' | 'compact';
  class?: string;
  inputClass?: string;
  [key: string]: any; // Allow any Alpine.js attributes
}

const { 
  type = 'text',
  placeholder,
  value = '',
  disabled = false,
  readonly = false,
  required = false,
  name,
  id,
  label,
  description,
  error,
  context = 'default',
  class: className = "",
  inputClass = "",
  ...rest
} = Astro.props;

// Generate class names using true design system
const getInputClasses = () => {
  const baseClass = 'input';
  const contextClass = context !== 'default' ? `${context}-input` : '';
  
  return `${baseClass} ${contextClass}`.trim();
};
---

<!-- 
TRUE Design System Text Input Component

Usage:
<TextInput 
  type="email"
  label="Email Address"
  placeholder="Enter your email"
  required={true}
  description="We'll never share your email"
  name="email"
/>

<TextInput context="compact" placeholder="Search..." />

States: default, error, disabled
Contextual Variants: default, compact
-->

<div class={`form-field ${className}`}>
  <!-- Label -->
  {label && (
    <label 
      for={id}
      class={`form-label ${disabled ? 'form-label--disabled' : ''}`}
    >
      {label}
      {required && <span class="form-required">*</span>}
    </label>
  )}
  
  <!-- Input -->
  <input 
    type={type}
    id={id}
    name={name}
    placeholder={placeholder}
    value={value}
    disabled={disabled}
    readonly={readonly}
    required={required}
    class={`${getInputClasses()} ${inputClass}`}
    data-state={error ? 'error' : disabled ? 'disabled' : null}
    {...rest}
  />
  
  <!-- Description -->
  {description && !error && (
    <p class={`form-description ${disabled ? 'form-description--disabled' : ''}`}>
      {description}
    </p>
  )}
  
  <!-- Error message -->
  {error && (
    <p class="form-error">
      <svg class="form-error-icon" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
      </svg>
      {error}
    </p>
  )}
</div>