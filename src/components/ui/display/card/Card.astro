---
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '@/lib/utils';
import { universalVariants, type UniversalSpacing, type UniversalDirection, type UIOverflow, type UniversalJustify, type UniversalAlign } from '@/lib/component-variants';

const cardVariants = cva(
    'text-card-foreground flex transition-all duration-200 [&_.card-header]:relative [&_.card-content]:relative [&_.card-footer]:relative [&_.card-header>*:first-child]:relative [&_.card-header>*:first-child]:z-10 [&_.card-content>*:first-child]:relative [&_.card-content>*:first-child]:z-10 [&_.card-footer>*:first-child]:relative [&_.card-footer>*:first-child]:z-10',
    {
        variants: {
            // Surface variants
            variant: {
                default: 'border border-border bg-background',
                muted: 'border border-border bg-muted',
                outline: 'border-2 border-border bg-transparent',
                ghost: '',
                gradient: 'border border-border bg-gradient-to-br from-background to-muted',
            },
            // Shape variants
            shape: {
                rectangle: 'rounded-none',
                rounded: 'rounded-lg',
                pill: 'rounded-full',
            },
            // Elevation variants
            elevation: {
                flat: 'shadow-none',
                shadow: 'shadow-sm',
                elevated: 'shadow-md',
                floating: 'shadow-lg',
            },
            // Interactive states
            interactive: {
                static: '',
                hover: 'cursor-default',
                click: 'cursor-pointer',
            },
            // Effect presets
            effect: {
                lift: '',
                scale: '',
                glow: '',
                subtle: '',
                bounce: '',
            },
            size: {
                fixed: 'w-80 h-96',
                'fixed-sm': 'w-64 h-72',
                'fixed-lg': 'w-96 h-120',
                extend: 'w-fit h-fit',
                horizontal: 'w-full h-fit',
                vertical: 'w-fit h-full',
                full: 'w-full h-full',
            },
        },
        compoundVariants: [
            // Hover effects - lift
            {
                interactive: 'hover',
                effect: 'lift',
                class: 'hover:-translate-y-0.5 hover:shadow-md',
            },
            {
                interactive: 'click',
                effect: 'lift',
                class: '[&.active]:translate-y-0 [&.active]:scale-[0.98] [&.active]:shadow-sm',
            },
            // Scale effects
            {
                interactive: 'hover',
                effect: 'scale',
                class: 'hover:scale-[1.02] hover:shadow-md',
            },
            {
                interactive: 'click',
                effect: 'scale',
                class: '[&.active]:scale-[0.98] [&.active]:shadow-sm',
            },
            // Glow effects
            {
                interactive: 'hover',
                effect: 'glow',
                class: 'hover:shadow-lg hover:bg-opacity-80',
            },
            {
                interactive: 'click',
                effect: 'glow',
                class: '[&.active]:shadow-lg [&.active]:bg-opacity-60',
            },
            // Subtle effects
            {
                interactive: 'hover',
                effect: 'subtle',
                class: 'hover:bg-opacity-80',
            },
            {
                interactive: 'click',
                effect: 'subtle',
                class: '[&.active]:bg-opacity-60',
            },
            // Bounce effects
            {
                interactive: 'hover',
                effect: 'bounce',
                class: 'hover:-translate-y-0.5 hover:scale-[1.01]',
            },
            {
                interactive: 'click',
                effect: 'bounce',
                class: '[&.active]:translate-y-0.5 [&.active]:scale-[0.99]',
            },
        ],
        defaultVariants: {
            variant: 'default',
            shape: 'rounded',
            elevation: 'shadow',
            interactive: 'static',
            effect: 'lift',
            size: 'fixed',
        },
    }
);

export interface Props extends VariantProps<typeof cardVariants> {
    className?: string;
    padding?: UniversalSpacing;
    overflow?: UIOverflow;
    direction?: UniversalDirection;
    justify?: UniversalJustify;
    align?: UniversalAlign;
    // Alpine.js pass-through
    [key: string]: any;
}

const { 
    variant = 'default',
    shape = 'rounded',
    elevation = 'shadow',
    interactive = 'static',
    effect = 'lift',
    size = 'fixed',
    padding = 'none', 
    overflow = 'fixed', 
    direction = 'column', 
    justify = 'start', 
    align = 'stretch', 
    className, 
    ...alpineProps 
} = Astro.props;
---

<div
    class={cn(
        cardVariants({ variant, shape, elevation, interactive, effect, size }),
        universalVariants.padding[padding],
        universalVariants.overflow[overflow],
        universalVariants.direction[direction],
        universalVariants.justify[justify],
        universalVariants.align[align],
        className
    )}
    data-card-interactive={interactive}
    {...alpineProps}
>
    <slot />
</div>
