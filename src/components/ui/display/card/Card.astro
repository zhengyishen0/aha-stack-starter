---
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '@/lib/utils';
import { universalVariants, type UniversalSpacing, type UniversalDirection, type UIOverflow, type UniversalJustify, type UniversalAlign } from '@/lib/component-variants';

const cardVariants = cva(
    'rounded-lg border text-card-foreground shadow-sm flex [&_.card-header]:relative [&_.card-content]:relative [&_.card-footer]:relative [&_.card-header>*:first-child]:relative [&_.card-header>*:first-child]:z-10 [&_.card-content>*:first-child]:relative [&_.card-content>*:first-child]:z-10 [&_.card-footer>*:first-child]:relative [&_.card-footer>*:first-child]:z-10',
    {
        variants: {
            variant: {
                default: 'border-border bg-background',
                outline: 'border-2 border-border bg-background',
                shadow: 'border-border bg-background shadow-md',
                elevated: 'border-border bg-background shadow-lg',
                ghost: 'border-transparent bg-transparent shadow-none',
                muted: 'border-border bg-muted',
            },
            size: {
                fixed: 'w-80 h-96',
                'fixed-sm': 'w-64 h-72',
                'fixed-lg': 'w-96 h-120',
                extend: 'w-fit h-fit',
                horizontal: 'w-full h-fit',
                vertical: 'w-fit h-full',
                full: 'w-full h-full',
            },
        },
        defaultVariants: {
            variant: 'default',
            size: 'fixed',
        },
    }
);

export interface Props extends VariantProps<typeof cardVariants> {
    className?: string;
    padding?: UniversalSpacing;
    overflow?: UIOverflow;
    direction?: UniversalDirection;
    justify?: UniversalJustify;
    align?: UniversalAlign;
    // Alpine.js pass-through
    [key: string]: any;
}

const { 
    variant, 
    size, 
    padding = 'none', 
    overflow = 'fixed', 
    direction = 'column', 
    justify = 'start', 
    align = 'stretch', 
    className, 
    ...alpineProps 
} = Astro.props;
---

<div
    class={cn(
        cardVariants({ variant, size }),
        universalVariants.padding[padding],
        universalVariants.overflow[overflow],
        universalVariants.direction[direction],
        universalVariants.justify[justify],
        universalVariants.align[align],
        className
    )}
    {...alpineProps}
>
    <slot />
</div>
