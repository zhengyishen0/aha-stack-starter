---
export interface Props {
  text: string;
  successMessage?: string;
  errorMessage?: string;
  timeout?: number;
  variant?: 'default' | 'icon';
  context?: 'default' | 'inline' | 'floating';
  class?: string;
}

const { 
  text,
  successMessage = 'Copied!',
  errorMessage = 'Failed to copy',
  timeout = 3000,
  variant = 'default',
  context = 'default',
  class: className = ""
} = Astro.props;

// Generate class names using true design system
const getComponentClasses = () => {
  const baseClass = 'copy-to-clipboard';
  const contextClass = context !== 'default' ? `${context}-copy-to-clipboard` : '';
  return `${baseClass} ${contextClass}`.trim();
};
---

<div 
  x-data={`{
    copyText: ${JSON.stringify(text)},
    copyNotification: false,
    copySuccess: true,
    successMessage: ${JSON.stringify(successMessage)},
    errorMessage: ${JSON.stringify(errorMessage)},
    timeout: ${timeout},
    
    async copyToClipboard() {
      try {
        if (navigator.clipboard && window.isSecureContext) {
          await navigator.clipboard.writeText(this.copyText);
          this.copySuccess = true;
        } else {
          this.fallbackCopyTextToClipboard(this.copyText);
          this.copySuccess = true;
        }
        this.copyNotification = true;
      } catch (err) {
        console.warn('Clipboard copy failed:', err);
        try {
          this.fallbackCopyTextToClipboard(this.copyText);
          this.copySuccess = true;
        } catch (fallbackErr) {
          console.error('Fallback copy also failed:', fallbackErr);
          this.copySuccess = false;
        }
        this.copyNotification = true;
      }
      
      setTimeout(() => {
        this.copyNotification = false;
      }, this.timeout);
    },
    
    fallbackCopyTextToClipboard(text) {
      const textArea = document.createElement('textarea');
      textArea.value = text;
      textArea.style.position = 'fixed';
      textArea.style.opacity = '0';
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
    }
  }`}
  class={`${getComponentClasses()} ${className}`}
  data-variant={variant !== 'default' ? variant : null}
>
  {variant === 'default' && (
    <button 
      @click="copyToClipboard()"
      class="copy-to-clipboard-button"
      type="button"
    >
      <span x-show="!copyNotification" class="copy-to-clipboard-content">
        Copy to Clipboard
        <svg class="copy-to-clipboard-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
        </svg>
      </span>
      
      <span x-show="copyNotification && copySuccess" class="copy-to-clipboard-feedback copy-to-clipboard-feedback-success">
        <span x-text="successMessage"></span>
        <svg class="copy-to-clipboard-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
        </svg>
      </span>
      
      <span x-show="copyNotification && !copySuccess" class="copy-to-clipboard-feedback copy-to-clipboard-feedback-error">
        <span x-text="errorMessage"></span>
        <svg class="copy-to-clipboard-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
        </svg>
      </span>
    </button>
  )}
  
  {variant === 'icon' && (
    <button 
      @click="copyToClipboard()"
      class="copy-to-clipboard-icon-button"
      type="button"
      :title="copyNotification ? (copySuccess ? successMessage : errorMessage) : 'Copy to clipboard'"
    >
      <svg x-show="!copyNotification" class="copy-to-clipboard-icon-large" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
      </svg>
      
      <svg x-show="copyNotification && copySuccess" class="copy-to-clipboard-icon-large copy-to-clipboard-icon-success" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
      </svg>
      
      <svg x-show="copyNotification && !copySuccess" class="copy-to-clipboard-icon-large copy-to-clipboard-icon-error" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
      </svg>
    </button>
  )}
  
  <div 
    x-show="copyNotification"
    x-transition:enter="transition ease-out duration-200"
    x-transition:enter-start="opacity-0 scale-95"
    x-transition:enter-end="opacity-100 scale-100"
    x-transition:leave="transition ease-in duration-75"
    x-transition:leave-start="opacity-100 scale-100"
    x-transition:leave-end="opacity-0 scale-95"
    class="copy-to-clipboard-tooltip"
    x-cloak
  >
    <span x-text="copySuccess ? (successMessage || 'Copied!') : (errorMessage || 'Failed to copy')"></span>
    <div class="copy-to-clipboard-tooltip-arrow"></div>
  </div>
</div>