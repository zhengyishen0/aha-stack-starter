---
export interface Props {
  id: string;
  closeable?: boolean;
  lockScroll?: boolean;
  class?: string;
  backdropClass?: string;
  contentClass?: string;
}

const { 
  id,
  closeable = true,
  lockScroll = true,
  class: className = "",
  backdropClass = "",
  contentClass = ""
} = Astro.props;

const getComponentClasses = () => {
  const baseClass = 'fullscreen-modal';
  return `${baseClass} ${className}`.trim();
};

const getBackdropClasses = () => {
  return `fullscreen-modal-backdrop ${backdropClass}`.trim();
};

const getContentClasses = () => {
  return `fullscreen-modal-content ${contentClass}`.trim();
};
---

<!-- 
Pine UI Full Screen Modal Component

Usage:
<FullScreenModal id="fullscreen-modal" closeable={true} lockScroll={true}>
  <div slot="trigger">
    <Button>Open Full Screen Modal</Button>
  </div>
  
  <div slot="header">
    <h1 class="fullscreen-modal-title">Full Screen Modal Title</h1>
  </div>
  
  <div slot="body">
    <p>This modal takes up the entire screen with smooth transitions.</p>
    <p>Content can be scrollable while the body scroll is locked.</p>
  </div>
  
  <div slot="footer">
    <Button variant="outline">Cancel</Button>
    <Button>Confirm</Button>
  </div>
</FullScreenModal>

Features:
- Full screen overlay that covers entire viewport
- Body scroll lock when modal is open
- Escape key to close
- Click outside to close (if closeable)
- Focus trapping with Alpine.js
- Smooth fade and scale transitions
- Teleported to body element
- Configurable backdrop and content styling
- Header, body, and footer slots for flexible layout
-->

<div 
  x-data="{ 
    fullscreenModal: false,
    originalBodyOverflow: '',
    lockBodyScroll() {
      if (this.fullscreenModal && this.lockScroll) {
        this.originalBodyOverflow = document.body.style.overflow;
        document.body.style.overflow = 'hidden';
      } else {
        document.body.style.overflow = this.originalBodyOverflow;
      }
    }
  }"
  x-init="lockScroll = $el.dataset.lockScroll === 'true'"
  x-effect="lockBodyScroll()"
  @keydown.escape.window="fullscreenModal = false"
  data-lock-scroll={lockScroll}
  class="fullscreen-modal-container"
>
  <!-- Trigger -->
  <div @click="fullscreenModal = true">
    <slot name="trigger" />
  </div>
  
  <!-- Full Screen Modal -->
  <template x-teleport="body">
    <dialog 
      x-show="fullscreenModal" 
      x-transition:enter="ease-out duration-300"
      x-transition:enter-start="opacity-0"
      x-transition:enter-end="opacity-100"
      x-transition:leave="ease-in duration-200"
      x-transition:leave-start="opacity-100"
      x-transition:leave-end="opacity-0"
      x-trap="fullscreenModal"
      class={getBackdropClasses()}
      @click.self={closeable ? "fullscreenModal = false" : ""}
      style="display: none;"
      open
    >
      <!-- Header -->
      <div class="fullscreen-modal-header">
        <div>
          <slot name="header" />
        </div>
        {closeable && (
          <button 
            @click="fullscreenModal = false"
            class="fullscreen-modal-close"
            type="button"
            aria-label="Close modal"
          >
            <svg class="fullscreen-modal-close-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        )}
      </div>
      
      <!-- Scrollable Content Container -->
      <div class={getContentClasses()}>
        <!-- Body -->
        <div class="fullscreen-modal-body">
          <slot name="body" />
          <slot />
        </div>
      </div>
      
      <!-- Footer -->
      <div class="fullscreen-modal-footer">
        <slot name="footer" />
      </div>
    </dialog>
  </template>
</div>

<style>
/* FullScreenModal Component Styles */
.fullscreen-modal-backdrop {
  position: fixed;
  inset: 0;
  z-index: var(--z-modal);
  background-color: var(--color-overlay);
  display: flex;
  flex-direction: column;
  height: 100vh;
  overflow: hidden;
}

.fullscreen-modal-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: var(--space-6) var(--space-6) var(--space-4);
  background-color: var(--color-surface-elevated);
  border-bottom: 1px solid var(--color-border);
  flex-shrink: 0;
}

.fullscreen-modal-close {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: var(--space-2);
  color: var(--color-text-secondary);
  background-color: transparent;
  border-radius: var(--radius-md);
  transition: all var(--transition-fast);
  flex-shrink: 0;
}

.fullscreen-modal-close:hover {
  color: var(--color-text-primary);
  background-color: var(--color-surface-hover);
}

.fullscreen-modal-close:focus-visible {
  outline: var(--focus-ring);
  outline-offset: var(--focus-ring-offset);
}

.fullscreen-modal-close-icon {
  width: var(--space-6);
  height: var(--space-6);
  stroke-width: 2;
}

.fullscreen-modal-content {
  flex: 1;
  overflow-y: auto;
  background-color: var(--color-surface-elevated);
  display: flex;
  flex-direction: column;
}

.fullscreen-modal-body {
  flex: 1;
  padding: var(--space-6);
}

.fullscreen-modal-footer {
  padding: var(--space-4) var(--space-6) var(--space-6);
  background-color: var(--color-surface-elevated);
  border-top: 1px solid var(--color-border);
  flex-shrink: 0;
}
</style>