---
export interface MenuItem {
  label: string;
  shortcut?: string;
  action?: string;
  separator?: boolean;
  disabled?: boolean;
  items?: MenuItem[];
}

export interface Props {
  items: MenuItem[];
  variant?: 'desktop' | 'web';
  class?: string;
}

const { 
  items,
  variant = 'web',
  class: className = ""
} = Astro.props;

// Generate class names using our design system
const getMenuBarClasses = () => {
  const baseClass = 'menu-bar';
  const variantClass = `menu-bar-${variant}`;
  
  return `${baseClass} ${variantClass}`;
};
---

<!-- 
Pine UI MenuBar Component

Usage:
<MenuBar 
  variant="web"
  items={[
    {
      label: 'File',
      items: [
        { label: 'New', shortcut: 'Cmd+N', action: 'new()' },
        { label: 'Open', shortcut: 'Cmd+O', action: 'open()' },
        { separator: true },
        { label: 'Save', shortcut: 'Cmd+S', action: 'save()' },
        { label: 'Export', disabled: true }
      ]
    },
    {
      label: 'Edit',
      items: [
        { label: 'Undo', shortcut: 'Cmd+Z', action: 'undo()' },
        { label: 'Redo', shortcut: 'Cmd+Shift+Z', action: 'redo()' }
      ]
    }
  ]}
/>

Props:
- items: Array of menu items with nested structure
- variant: Style variant - 'desktop' (native app style) or 'web' (web app style)
- class: Additional CSS classes

MenuItem Interface:
- label: Display text
- shortcut: Keyboard shortcut text (optional)
- action: JavaScript function to execute (optional)
- separator: Show as separator line (optional)
- disabled: Disable the item (optional)
- items: Nested submenu items (optional)
-->

<nav 
  class={`${getMenuBarClasses()} ${className}`}
  x-data="{ 
    activeMenu: null,
    openMenu(index) {
      this.activeMenu = this.activeMenu === index ? null : index;
    },
    closeMenu() {
      this.activeMenu = null;
    },
    executeAction(action) {
      if (action && typeof window[action] === 'function') {
        window[action]();
      }
      this.closeMenu();
    }
  }"
  @click.away="closeMenu()"
  @keydown.escape="closeMenu()"
>
  <div class="menu-bar-nav">
    <ul class="menu-bar-list">
      {items.map((item, index) => (
        <li class="menu-bar-item">
          <button
            class={`menu-bar-trigger ${variant === 'desktop' ? 'menu-bar-trigger-desktop' : ''}`}
            @click={`openMenu(${index})`}
            @mouseenter={`openMenu(${index})`}
            :class={`{ 'menu-bar-trigger-active': activeMenu === ${index} }`}
            type="button"
          >
            {item.label}
          </button>
          
          {item.items && (
            <div
              x-show={`activeMenu === ${index}`}
              x-transition:enter="transition ease-out duration-100"
              x-transition:enter-start="transform opacity-0 scale-95"
              x-transition:enter-end="transform opacity-100 scale-100"
              x-transition:leave="transition ease-in duration-75"
              x-transition:leave-start="transform opacity-100 scale-100"
              x-transition:leave-end="transform opacity-0 scale-95"
              class="menu-bar-content"
              @click.stop
            >
              <ul class="menu-bar-content-list">
                {item.items.map((subItem) => (
                  subItem.separator ? (
                    <li class="menu-bar-content-item">
                      <hr class="menu-bar-separator" />
                    </li>
                  ) : (
                    <li class="menu-bar-content-item">
                      <button
                        class="menu-bar-content-button"
                        @click={subItem.action && !subItem.disabled ? `executeAction('${subItem.action}')` : ''}
                        disabled={subItem.disabled}
                        type="button"
                      >
                        <span class="menu-bar-content-label">{subItem.label}</span>
                        {subItem.shortcut && (
                          <span class="menu-bar-content-shortcut">
                            {subItem.shortcut}
                          </span>
                        )}
                      </button>
                    </li>
                  )
                ))}
              </ul>
            </div>
          )}
        </li>
      ))}
    </ul>
  </div>
</nav>

<script>
  // Global keyboard shortcut handler for menu actions
  document.addEventListener('keydown', (e) => {
    const isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;
    const cmdKey = isMac ? e.metaKey : e.ctrlKey;
    
    // Handle common shortcuts
    if (cmdKey) {
      switch(e.key.toLowerCase()) {
        case 'n':
          if (typeof window.new === 'function') {
            e.preventDefault();
            window.new();
          }
          break;
        case 'o':
          if (typeof window.open === 'function') {
            e.preventDefault();
            window.open();
          }
          break;
        case 's':
          if (typeof window.save === 'function') {
            e.preventDefault();
            window.save();
          }
          break;
        case 'z':
          if (e.shiftKey && typeof window.redo === 'function') {
            e.preventDefault();
            window.redo();
          } else if (!e.shiftKey && typeof window.undo === 'function') {
            e.preventDefault();
            window.undo();
          }
          break;
      }
    }
  });
</script>