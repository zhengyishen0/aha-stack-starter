---
export interface Props {
  tabs: Array<{
    id: string;
    label: string;
    content?: string;
    disabled?: boolean;
  }>;
  defaultTab?: string;
  variant?: 'underline' | 'pills' | 'enclosed';
  class?: string;
  contentClass?: string;
}

const { 
  tabs,
  defaultTab = tabs[0]?.id,
  variant = 'underline',
  class: className = "",
  contentClass = ""
} = Astro.props;

const getComponentClasses = () => {
  const baseClass = 'tabs';
  const variantClass = variant ? `tabs-${variant}` : '';
  return `${baseClass} ${variantClass} ${className}`.trim();
};

const getTabListClasses = () => {
  const baseClass = 'tab-list';
  const variantClass = variant ? `tab-list-${variant}` : '';
  return `${baseClass} ${variantClass}`.trim();
};

const getTabItemClasses = () => {
  const baseClass = 'tab-item';
  const variantClass = variant ? `tab-item-${variant}` : '';
  return `${baseClass} ${variantClass}`;
};

const getTabActiveClasses = () => {
  const baseClass = 'tab-active';
  const variantClass = variant ? `tab-active-${variant}` : '';
  return `${baseClass} ${variantClass}`;
};

const getTabInactiveClasses = () => {
  const baseClass = 'tab-item';
  const variantClass = variant ? `tab-item-${variant}` : '';
  return `${baseClass} ${variantClass}`;
};
---

<!-- 
Pine UI Tabs Component

Usage:
<Tabs 
  tabs={[
    { id: "tab1", label: "Overview", content: "Overview content..." },
    { id: "tab2", label: "Analytics", content: "Analytics content..." },
    { id: "tab3", label: "Settings", content: "Settings content...", disabled: true }
  ]}
  defaultTab="tab1"
  variant="underline"
/>

Features:
- Multiple variants (underline, pills, enclosed)
- Disabled tabs
- Keyboard navigation
- Content slots or props
- Alpine.js powered switching
-->

<div 
  x-data={`{
    tabSelected: '${defaultTab}',
    tabId: $id('tab'),
    tabButtonClicked(tabButton) {
      this.tabSelected = tabButton.id.replace(this.tabId + '-', '');
      this.tabRepositionMarker(tabButton);
    },
    tabRepositionMarker(tabButton) {
      this.$refs.tabMarker.style.width = tabButton.offsetWidth + 'px';
      this.$refs.tabMarker.style.height = tabButton.offsetHeight + 'px';
      this.$refs.tabMarker.style.left = tabButton.offsetLeft + 'px';
    },
    tabContentActive(tabContent) {
      return this.tabSelected == tabContent.id.replace(this.tabId + '-content-', '');
    }
  }`}
  x-init="setTimeout(() => { 
    const activeButton = Array.from($refs.tabButtons.children).find(btn => btn.id.includes(tabSelected));
    if (activeButton && '${variant}' === 'pills') tabRepositionMarker(activeButton);
  }, 0);"
  class={getComponentClasses()}
>
  <!-- Tab Navigation -->
  <div class={getTabListClasses()}>
    <div x-ref="tabButtons" class="tab-list-container">
      {tabs.map((tab) => (
        <button 
          :id="`${tabId}-${tab.id}`"
          @click="tabButtonClicked($el)"
          :class="tabSelected === '${tab.id}' ? '${getTabActiveClasses()}' : '${getTabInactiveClasses()}'"
          class={`${getTabItemClasses()} ${tab.disabled ? 'tab-item-disabled' : ''}`}
          disabled={tab.disabled}
          type="button"
        >
          {tab.label}
        </button>
      ))}
    </div>
    
    <!-- Moving marker for pills variant -->
    {variant === 'pills' && (
      <div 
        x-ref="tabMarker" 
        class="tab-marker"
      ></div>
    )}
  </div>
  
  <!-- Tab Content -->
  <div class={`tab-content ${contentClass}`}>
    {tabs.map((tab) => (
      <div 
        :id="`${tabId}-content-${tab.id}`"
        x-show="tabSelected === '${tab.id}'"
        class="tab-panel"
      >
        {tab.content ? (
          <div set:html={tab.content} />
        ) : (
          <slot />
        )}
      </div>
    ))}
  </div>
</div>