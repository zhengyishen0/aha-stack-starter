---
export interface Props {
  variant?: 'success' | 'error' | 'warning' | 'info' | 'default';
  position?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left' | 'top-center' | 'bottom-center';
  duration?: number;
  title?: string;
  icon?: string;
  dismissible?: boolean;
  class?: string;
  id?: string;
}

const { 
  variant = 'default',
  position = 'top-right',
  duration = 5000,
  title,
  icon,
  dismissible = true,
  class: className = "",
  id = 'toast'
} = Astro.props;

const getComponentClasses = () => {
  const baseClass = 'toast';
  const variantClass = variant ? `toast-${variant}` : '';
  return `${baseClass} ${variantClass}`.trim();
};

const positionClasses: { [key: string]: string } = {
  'top-right': 'top-4 right-4',
  'top-left': 'top-4 left-4',
  'bottom-right': 'bottom-4 right-4',
  'bottom-left': 'bottom-4 left-4',
  'top-center': 'top-4 left-1/2 transform -translate-x-1/2',
  'bottom-center': 'bottom-4 left-1/2 transform -translate-x-1/2',
};

const defaultIcons: { [key: string]: string } = {
  'success': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>',
  'error': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>',
  'warning': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4.5c-.77-.833-2.694-.833-3.464 0L3.34 16.5c-.77.833.192 2.5 1.732 2.5z"></path>',
  'info': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>',
  'default': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>',
};
---

<!-- 
Pine UI Toast Notification Component

Usage:
<Toast 
  variant="success" 
  position="top-right"
  title="Success!"
  duration={5000}
  dismissible={true}
>
  Your action was completed successfully.
</Toast>

Advanced Usage with Custom Toast Queue:
<div x-data="toastQueue()">
  <button @click="addToast('success', 'Success!', 'Action completed')">Show Success</button>
  <button @click="addToast('error', 'Error!', 'Something went wrong')">Show Error</button>
  
  <!-- Toast Container -->
  <div class="fixed top-4 right-4 z-50 space-y-2">
    <template x-for="toast in toasts" :key="toast.id">
      <Toast 
        x-show="toast.visible"
        :variant="toast.variant"
        :title="toast.title"
        @close="removeToast(toast.id)"
      >
        <span x-text="toast.message"></span>
      </Toast>
    </template>
  </div>
</div>

<script>
function toastQueue() {
  return {
    toasts: [],
    nextId: 1,
    
    addToast(variant, title, message, duration = 5000) {
      const toast = {
        id: this.nextId++,
        variant,
        title,
        message,
        visible: true,
        duration
      };
      
      this.toasts.push(toast);
      
      // Auto remove after duration
      if (duration > 0) {
        setTimeout(() => {
          this.removeToast(toast.id);
        }, duration);
      }
    },
    
    removeToast(id) {
      const index = this.toasts.findIndex(t => t.id === id);
      if (index > -1) {
        this.toasts[index].visible = false;
        setTimeout(() => {
          this.toasts.splice(index, 1);
        }, 300); // Wait for animation
      }
    }
  }
}
</script>

Variants: default, success, error, warning, info
Positions: top-right, top-left, bottom-right, bottom-left, top-center, bottom-center

Features:
- Auto-dismiss with configurable duration
- Multiple variants with appropriate colors and icons
- Flexible positioning system
- Queue management for multiple toasts
- Smooth enter/exit animations
- Alpine.js powered interactivity
- Dismissible with close button
- Support for custom icons
- Teleport to body for proper z-index stacking
-->

<template x-teleport="body">
  <div 
    x-data="{ 
      toastVisible: true,
      duration: ${duration},
      init() {
        if (this.duration > 0) {
          setTimeout(() => {
            this.toastVisible = false;
          }, this.duration);
        }
      }
    }`
    x-show="toastVisible"
    x-transition:enter="transition ease-out duration-300"
    x-transition:enter-start="opacity-0 transform translate-y-2 scale-95"
    x-transition:enter-end="opacity-100 transform translate-y-0 scale-100"
    x-transition:leave="transition ease-in duration-200"
    x-transition:leave-start="opacity-100 transform translate-y-0 scale-100"
    x-transition:leave-end="opacity-0 transform translate-y-2 scale-95"
    class={`fixed ${positionClasses[position]} w-full max-w-sm pointer-events-auto`}
    style="z-index: var(--z-toast)"
  >
    <div class={`${getComponentClasses()} ${className}`}>
      
      {/* Icon */}
      {(icon || defaultIcons[variant]) && (
        <svg class="toast-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <Fragment set:html={icon || defaultIcons[variant]} />
        </svg>
      )}
      
      {/* Content */}
      <div class="toast-content">
        {title && (
          <p class="toast-title">
            {title}
          </p>
        )}
        <div class={`toast-message ${title ? 'has-title' : ''}`}>
          <slot />
        </div>
      </div>
      
      {/* Dismiss Button */}
      {dismissible && (
        <button 
          @click="toastVisible = false; $dispatch('close')"
          class="toast-close"
          type="button"
          aria-label="Close notification"
        >
          <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      )}
      
      {/* Progress Bar (if duration is set) */}
      {duration > 0 && (
        <div 
          class="toast-progress"
          x-data="{}"
          x-init="$el.style.width = '100%'; $el.style.transition = `width ${duration}ms linear`; setTimeout(() => $el.style.width = '0%', 10)"
        ></div>
      )}
    </div>
  </div>
</template>