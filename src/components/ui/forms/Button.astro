---
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '@/lib/utils';

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md font-medium tracking-wide transition-colors duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 no-underline",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        success: "bg-success text-success-foreground hover:bg-success/90",
        warning: "bg-warning text-warning-foreground hover:bg-warning/90",
        info: "bg-info text-info-foreground hover:bg-info/90",
        outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline"
      },
      size: {
        xs: "h-7 px-2 text-xs",
        sm: "h-8 px-3 text-xs",
        default: "h-9 px-4 py-2 text-sm",
        md: "h-10 px-6 py-2 text-base",
        lg: "h-11 px-8 text-lg",
        icon: "h-9 w-9"
      },
      elevation: {
        none: "shadow-none",
        flat: "shadow-flat",
        elevated: "shadow-elevated",
        floating: "shadow-floating"
      }
    },
    defaultVariants: {
      variant: "default",
      size: "default",
      elevation: "none"
    }
  }
);

export interface Props extends VariantProps<typeof buttonVariants> {
  type?: 'button' | 'submit' | 'reset';
  disabled?: boolean;
  className?: string;
  href?: string;
  // Alpine.js pass-through
  [key: string]: any;
}

const { 
  variant,
  size,
  elevation,
  disabled = false,
  type = 'button',
  className,
  href,
  ...alpineProps
} = Astro.props;

const Tag = href ? 'a' : 'button';
---

<!-- 
Pine UI Button Component - Refactored with CVA + shadcn patterns

Usage:
<Button variant="default" size="default">Click me</Button>
<Button variant="outline" disabled>Disabled</Button>
<Button variant="destructive" size="lg">Delete</Button>
<Button variant="ghost" size="sm">Cancel</Button>
<Button href="/about" variant="link">Link Button</Button>

Variants: default, destructive, outline, secondary, ghost, link
Sizes: xs, sm, default, md, lg, icon
Props: href (renders as <a> tag when provided)
-->

<Tag 
  type={href ? undefined : type}
  href={href}
  disabled={href ? undefined : disabled}
  class={cn(buttonVariants({ variant, size, elevation }), className)}
  {...alpineProps}
>
  <slot />
</Tag>