---
export interface Props {
  id?: string;
  name?: string;
  checked?: boolean;
  disabled?: boolean;
  label?: string;
  description?: string;
  variant?: 'default' | 'custom';
  class?: string;
  labelClass?: string;
  // Alpine.js pass-through
  [key: string]: any;
}

const { 
  id = `checkbox-${Math.random().toString(36).substr(2, 9)}`,
  name = id,
  checked = false,
  disabled = false,
  label,
  description,
  variant = 'default',
  class: className = "",
  labelClass = "",
  ...alpineProps
} = Astro.props;
---

<!-- 
Pine UI Checkbox Component

Usage:
<Checkbox 
  id="checkbox-1" 
  label="Accept terms and conditions" 
  description="You agree to our Terms of Service and Privacy Policy."
/>

<Checkbox 
  id="custom-checkbox" 
  label="Custom styled checkbox" 
  variant="custom"
/>

Features:
- Default and custom styling variants
- Optional descriptions
- Disabled state
- Accessible labels
-->

{variant === 'default' && (
  <div class={`flex items-start ${className}`}>
    <div class="flex items-center h-5">
      <input 
        id={id}
        name={name}
        type="checkbox" 
        checked={checked}
        disabled={disabled}
        class="w-4 h-4 bg-gray-100 border-gray-300 rounded text-neutral-900 focus:ring-neutral-900 focus:ring-2 disabled:opacity-50"
        {...alpineProps}
      />
    </div>
    {(label || description) && (
      <div class="ml-3 text-sm">
        {label && (
          <label for={id} class={`font-medium text-gray-900 ${labelClass} ${disabled ? 'opacity-50' : ''}`}>
            {label}
          </label>
        )}
        {description && (
          <p class={`text-gray-500 ${disabled ? 'opacity-50' : ''}`}>
            {description}
          </p>
        )}
      </div>
    )}
  </div>
)}

{variant === 'custom' && (
  <div class={`flex items-start ${className}`}>
    <div class="flex items-center h-5">
      <input 
        id={id}
        name={name}
        type="checkbox" 
        checked={checked}
        disabled={disabled}
        class="hidden peer"
        {...alpineProps}
      />
      <label for={id} class={`flex items-center space-x-3 cursor-pointer ${disabled ? 'opacity-50 cursor-not-allowed' : ''}`}>
        <span class="flex items-center justify-center w-5 h-5 border-2 border-gray-300 rounded peer-checked:border-neutral-900 peer-checked:bg-neutral-900 transition-colors duration-200">
          <svg class="w-3 h-3 text-white opacity-0 peer-checked:opacity-100 transition-opacity duration-200" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
          </svg>
        </span>
        {(label || description) && (
          <div>
            {label && (
              <span class={`text-sm font-medium text-gray-900 ${labelClass}`}>
                {label}
              </span>
            )}
            {description && (
              <p class="text-sm text-gray-500">
                {description}
              </p>
            )}
          </div>
        )}
      </label>
    </div>
  </div>
)}