---
export interface Props {
  options: Array<{
    value: string;
    label: string;
    disabled?: boolean;
  }>;
  placeholder?: string;
  selectedValue?: string;
  searchable?: boolean;
  disabled?: boolean;
  hasError?: boolean;
  context?: 'default' | 'form' | 'hero';
  name?: string;
  id?: string;
  class?: string;
}

const { 
  options,
  placeholder = "Select an option...",
  selectedValue = '',
  searchable = false,
  disabled = false,
  hasError = false,
  context = 'default',
  name,
  id,
  class: className = ""
} = Astro.props;

// Generate class names using true design system
const getComponentClasses = () => {
  const baseClass = 'select';
  const contextClass = context !== 'default' ? `${context}-select` : '';
  return `${baseClass} ${contextClass} ${className}`.trim();
};

const getSelectState = () => {
  if (disabled) return 'disabled';
  if (hasError) return 'error';
  return null;
};
---

<!-- 
TRUE Design System Select Component

Usage:
<Select 
  options={[
    { value: "option1", label: "Option 1" },
    { value: "option2", label: "Option 2" },
    { value: "option3", label: "Option 3", disabled: true }
  ]}
  placeholder="Choose an option..."
  searchable={true}
  selectedValue="option1"
/>

<Select context="form" options={...} />
<Select context="hero" hasError={true} options={...} />

Contextual Variants: default, form (small), hero (large)
States: default, disabled, error
-->

<div 
  x-data={`{
    selectOpen: false,
    selectedItem: '${selectedValue}',
    selectableItems: ${JSON.stringify(options)},
    searchTerm: '',
    selectId: $id('select'),
    
    get filteredItems() {
      if (!this.searchTerm) return this.selectableItems;
      return this.selectableItems.filter(item => 
        item.label.toLowerCase().includes(this.searchTerm.toLowerCase())
      );
    },
    
    get selectedLabel() {
      const item = this.selectableItems.find(item => item.value === this.selectedItem);
      return item ? item.label : \`${placeholder}\`;
    },
    
    selectItem(item) {
      if (item.disabled) return;
      this.selectedItem = item.value;
      this.selectOpen = false;
      this.searchTerm = '';
      this.$refs.hiddenInput.value = item.value;
      this.$refs.hiddenInput.dispatchEvent(new Event('change'));
    },
    
    selectKeydown(event) {
      if (event.key === 'Escape') {
        this.selectOpen = false;
      }
    }
  }`}
  @click.away="selectOpen = false"
  @keydown="selectKeydown"
  class={getComponentClasses()}
  data-state={getSelectState()}
>
  <!-- Hidden input for form submission -->
  <input 
    x-ref="hiddenInput"
    type="hidden" 
    :name="name"
    :id="id"
    :value="selectedItem"
  />
  
  <!-- Select button -->
  <button 
    @click="selectOpen = !selectOpen"
    :disabled="disabled"
    :aria-expanded="selectOpen"
    class="select-trigger"
    type="button"
  >
    <span 
      class="select-value"
      :class="{ 'select-placeholder': selectedItem === '' }"
      x-text="selectedLabel"
    ></span>
    <span class="select-icon">
      <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
      </svg>
    </span>
  </button>
  
  <!-- Dropdown menu -->
  <div 
    x-show="selectOpen"
    x-transition:enter="transition-enter"
    x-transition:enter-start="transition-enter-start"
    x-transition:enter-end="transition-enter-end"
    x-transition:leave="transition-leave"
    x-transition:leave-start="transition-leave-start"
    x-transition:leave-end="transition-leave-end"
    class="select-dropdown"
    x-cloak
  >
    <!-- Search input -->
    {searchable && (
      <input 
        x-model="searchTerm"
        type="text"
        class="select-search"
        placeholder="Search options..."
      />
    )}
    
    <!-- Options -->
    <template x-for="item in filteredItems" :key="item.value">
      <button 
        @click="selectItem(item)"
        :aria-selected="selectedItem === item.value"
        :disabled="item.disabled"
        class="select-option"
        type="button"
      >
        <span x-text="item.label"></span>
      </button>
    </template>
    
    <!-- No results -->
    <div x-show="filteredItems.length === 0" class="select-no-results">
      No options found
    </div>
  </div>
</div>