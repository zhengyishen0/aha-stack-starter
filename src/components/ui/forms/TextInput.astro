---
export interface Props {
  type?: 'text' | 'email' | 'password' | 'number' | 'tel' | 'url' | 'search';
  placeholder?: string;
  value?: string;
  disabled?: boolean;
  readonly?: boolean;
  required?: boolean;
  name?: string;
  id?: string;
  label?: string;
  description?: string;
  error?: string;
  size?: 'sm' | 'md' | 'lg';
  variant?: 'default' | 'filled' | 'underlined';
  class?: string;
  inputClass?: string;
  // Alpine.js pass-through
  [key: string]: any;
}

const { 
  type = 'text',
  placeholder,
  value = '',
  disabled = false,
  readonly = false,
  required = false,
  name,
  id,
  label,
  description,
  error,
  size = 'md',
  variant = 'default',
  class: className = "",
  inputClass = "",
  ...alpineProps
} = Astro.props;

const sizeClasses = {
  'sm': 'px-3 py-1.5 text-sm',
  'md': 'px-3 py-2 text-sm',
  'lg': 'px-4 py-3 text-base'
};

const variantClasses = {
  'default': 'border border-gray-300 rounded-md bg-white focus:border-blue-500 focus:ring-1 focus:ring-blue-500',
  'filled': 'border-0 rounded-md bg-gray-100 focus:bg-white focus:ring-2 focus:ring-blue-500',
  'underlined': 'border-0 border-b-2 border-gray-300 rounded-none bg-transparent focus:border-blue-500 focus:ring-0'
};
---

<!-- 
Pine UI Text Input Component

Usage:
<TextInput 
  type="email"
  label="Email Address"
  placeholder="Enter your email"
  required={true}
  description="We'll never share your email"
  name="email"
/>

Features:
- Multiple input types
- Various sizes and variants
- Label and description support
- Error state handling
- Disabled/readonly states
- Focus management
-->

<div class={`w-full ${className}`}>
  <!-- Label -->
  {label && (
    <label 
      for={id}
      class={`block text-sm font-medium text-gray-700 mb-1 ${disabled ? 'opacity-50' : ''}`}
    >
      {label}
      {required && <span class="text-red-500 ml-1">*</span>}
    </label>
  )}
  
  <!-- Input -->
  <input 
    type={type}
    id={id}
    name={name}
    placeholder={placeholder}
    value={value}
    disabled={disabled}
    readonly={readonly}
    required={required}
    class={`w-full transition-colors duration-200 focus:outline-none ${sizeClasses[size]} ${variantClasses[variant]} ${
      error 
        ? 'border-red-500 focus:border-red-500 focus:ring-red-500' 
        : ''
    } ${disabled ? 'opacity-50 cursor-not-allowed bg-gray-50' : ''} ${
      readonly ? 'bg-gray-50' : ''
    } ${inputClass}`}
    {...alpineProps}
  />
  
  <!-- Description -->
  {description && !error && (
    <p class={`mt-1 text-xs text-gray-500 ${disabled ? 'opacity-50' : ''}`}>
      {description}
    </p>
  )}
  
  <!-- Error message -->
  {error && (
    <p class="mt-1 text-xs text-red-500 flex items-center">
      <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
      </svg>
      {error}
    </p>
  )}
</div>