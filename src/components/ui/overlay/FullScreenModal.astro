---
export interface Props {
  id: string;
  closeable?: boolean;
  lockScroll?: boolean;
  class?: string;
  backdropClass?: string;
  contentClass?: string;
}

const { 
  id,
  closeable = true,
  lockScroll = true,
  class: className = "",
  backdropClass = "",
  contentClass = ""
} = Astro.props;
---

<!-- 
Pine UI Full Screen Modal Component

Usage:
<FullScreenModal id="fullscreen-modal" closeable={true} lockScroll={true}>
  <div slot="trigger">
    <Button>Open Full Screen Modal</Button>
  </div>
  
  <div slot="header">
    <h1 class="text-2xl font-bold">Full Screen Modal Title</h1>
  </div>
  
  <div slot="body">
    <p>This modal takes up the entire screen with smooth transitions.</p>
    <p>Content can be scrollable while the body scroll is locked.</p>
  </div>
  
  <div slot="footer">
    <Button variant="outline">Cancel</Button>
    <Button>Confirm</Button>
  </div>
</FullScreenModal>

Features:
- Full screen overlay that covers entire viewport
- Body scroll lock when modal is open
- Escape key to close
- Click outside to close (if closeable)
- Focus trapping with Alpine.js
- Smooth fade and scale transitions
- Teleported to body element
- Configurable backdrop and content styling
- Header, body, and footer slots for flexible layout
-->

<div 
  x-data="{ 
    fullscreenModal: false,
    originalBodyOverflow: '',
    lockBodyScroll() {
      if (this.fullscreenModal && this.lockScroll) {
        this.originalBodyOverflow = document.body.style.overflow;
        document.body.style.overflow = 'hidden';
      } else {
        document.body.style.overflow = this.originalBodyOverflow;
      }
    }
  }"
  x-init="lockScroll = $el.dataset.lockScroll === 'true'"
  x-effect="lockBodyScroll()"
  @keydown.escape.window="fullscreenModal = false"
  data-lock-scroll={lockScroll}
  class="relative z-50 w-auto h-auto"
>
  <!-- Trigger -->
  <div @click="fullscreenModal = true">
    <slot name="trigger" />
  </div>
  
  <!-- Full Screen Modal -->
  <template x-teleport="body">
    <div 
      x-show="fullscreenModal" 
      x-transition:enter="ease-out duration-300"
      x-transition:enter-start="opacity-0"
      x-transition:enter-end="opacity-100"
      x-transition:leave="ease-in duration-200"
      x-transition:leave-start="opacity-100"
      x-transition:leave-end="opacity-0"
      x-trap.inert.noscroll="fullscreenModal"
      class={`fixed inset-0 z-[100] flex flex-col w-screen h-screen bg-white ${backdropClass}`}
      @click.self={closeable ? "fullscreenModal = false" : ""}
      style="display: none;"
    >
      <!-- Header -->
      <div class="flex items-center justify-between px-6 py-4 border-b border-neutral-200 bg-white z-10">
        <div class="flex-1">
          <slot name="header" />
        </div>
        {closeable && (
          <button 
            @click="fullscreenModal = false"
            class="text-gray-400 hover:text-gray-600 transition-colors duration-200 p-2 hover:bg-gray-100 rounded-md"
            type="button"
            aria-label="Close modal"
          >
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        )}
      </div>
      
      <!-- Scrollable Content Container -->
      <div class="flex-1 overflow-y-auto">
        <!-- Body -->
        <div class={`px-6 py-6 min-h-full ${contentClass}`}>
          <slot name="body" />
          <slot />
        </div>
      </div>
      
      <!-- Footer -->
      <div class="flex items-center justify-end gap-3 px-6 py-4 border-t border-neutral-200 bg-white z-10">
        <slot name="footer" />
      </div>
    </div>
  </template>
</div>