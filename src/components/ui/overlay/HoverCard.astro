---
export interface Props {
  content?: string;
  position?: 'top' | 'top-start' | 'top-end' | 'right' | 'right-start' | 'right-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end';
  showDelay?: number;
  hideDelay?: number;
  openOnHover?: boolean;
  openOnClick?: boolean;
  maxWidth?: string;
  class?: string;
  cardClass?: string;
  arrowClass?: string;
  showArrow?: boolean;
}

const { 
  content = "",
  position = 'top',
  showDelay = 500,
  hideDelay = 300,
  openOnHover = true,
  openOnClick = false,
  maxWidth = "320px",
  showArrow = true,
  class: className = "",
  cardClass = "",
  arrowClass = ""
} = Astro.props;

const positionClasses = {
  'top': 'bottom-full left-1/2 transform -translate-x-1/2 mb-2',
  'top-start': 'bottom-full left-0 mb-2',
  'top-end': 'bottom-full right-0 mb-2',
  'right': 'left-full top-1/2 transform -translate-y-1/2 ml-2',
  'right-start': 'left-full top-0 ml-2',
  'right-end': 'left-full bottom-0 ml-2',
  'bottom': 'top-full left-1/2 transform -translate-x-1/2 mt-2',
  'bottom-start': 'top-full left-0 mt-2',
  'bottom-end': 'top-full right-0 mt-2',
  'left': 'right-full top-1/2 transform -translate-y-1/2 mr-2',
  'left-start': 'right-full top-0 mr-2',
  'left-end': 'right-full bottom-0 mr-2'
};

const arrowClasses = {
  'top': 'top-full left-1/2 transform -translate-x-1/2 border-l-transparent border-r-transparent border-b-transparent border-t-white',
  'top-start': 'top-full left-3 border-l-transparent border-r-transparent border-b-transparent border-t-white',
  'top-end': 'top-full right-3 border-l-transparent border-r-transparent border-b-transparent border-t-white',
  'right': 'right-full top-1/2 transform -translate-y-1/2 border-t-transparent border-b-transparent border-l-transparent border-r-white',
  'right-start': 'right-full top-3 border-t-transparent border-b-transparent border-l-transparent border-r-white',
  'right-end': 'right-full bottom-3 border-t-transparent border-b-transparent border-l-transparent border-r-white',
  'bottom': 'bottom-full left-1/2 transform -translate-x-1/2 border-l-transparent border-r-transparent border-t-transparent border-b-white',
  'bottom-start': 'bottom-full left-3 border-l-transparent border-r-transparent border-t-transparent border-b-white',
  'bottom-end': 'bottom-full right-3 border-l-transparent border-r-transparent border-t-transparent border-b-white',
  'left': 'left-full top-1/2 transform -translate-y-1/2 border-t-transparent border-b-transparent border-r-transparent border-l-white',
  'left-start': 'left-full top-3 border-t-transparent border-b-transparent border-r-transparent border-l-white',
  'left-end': 'left-full bottom-3 border-t-transparent border-b-transparent border-r-transparent border-l-white'
};
---

<!-- 
Pine UI Hover Card Component

Usage:
<HoverCard 
  content="Quick preview content"
  position="top" 
  showDelay={500}
  hideDelay={300}
  maxWidth="320px"
>
  <Button>Hover for card</Button>
</HoverCard>

Advanced Usage with Custom Content:
<HoverCard position="bottom" showDelay={200}>
  <Button>Hover me</Button>
  
  <div slot="card">
    <div class="p-4">
      <h3 class="font-semibold text-lg mb-2">Custom Card Content</h3>
      <p class="text-gray-600">Rich content with images, links, and formatted text.</p>
      <div class="mt-3 flex gap-2">
        <Button size="sm">Action 1</Button>
        <Button size="sm" variant="outline">Action 2</Button>
      </div>
    </div>
  </div>
</HoverCard>

Features:
- Configurable hover and hide delays
- Multiple positioning options with start/end variants
- Rich content support via slots
- Smooth transitions with Alpine.js
- Click or hover trigger options
- Customizable max width and styling
- Optional arrow indicator
- Timeout management for smooth UX
-->

<div 
  x-data={`{
    hoverCardHovered: false,
    hoverCardDelay: ${showDelay},
    hoverCardHideDelay: ${hideDelay},
    hoverCardTimeout: null,
    hoverCardHideTimeout: null,
    hoverCardPosition: '${position}',
    hoverCardMaxWidth: '${maxWidth}',
    openOnHover: ${openOnHover},
    openOnClick: ${openOnClick},
    
    showCard() {
      if (this.hoverCardHideTimeout) {
        clearTimeout(this.hoverCardHideTimeout);
        this.hoverCardHideTimeout = null;
      }
      
      if (!this.hoverCardHovered) {
        this.hoverCardTimeout = setTimeout(() => {
          this.hoverCardHovered = true;
        }, this.hoverCardDelay);
      }
    },
    
    hideCard() {
      if (this.hoverCardTimeout) {
        clearTimeout(this.hoverCardTimeout);
        this.hoverCardTimeout = null;
      }
      
      this.hoverCardHideTimeout = setTimeout(() => {
        this.hoverCardHovered = false;
      }, this.hoverCardHideDelay);
    },
    
    keepCard() {
      if (this.hoverCardHideTimeout) {
        clearTimeout(this.hoverCardHideTimeout);
        this.hoverCardHideTimeout = null;
      }
    }
  }`}
  class={`relative inline-block ${className}`}
  @mouseenter={openOnHover ? "showCard()" : ""}
  @mouseleave={openOnHover ? "hideCard()" : ""}
  @click={openOnClick ? "hoverCardHovered = !hoverCardHovered" : ""}
>
  <!-- Trigger element -->
  <slot />
  
  <!-- Hover Card -->
  <div 
    x-show="hoverCardHovered"
    x-transition:enter="transition ease-out duration-200"
    x-transition:enter-start="opacity-0 scale-95 transform"
    x-transition:enter-end="opacity-100 scale-100 transform"
    x-transition:leave="transition ease-in duration-150"
    x-transition:leave-start="opacity-100 scale-100 transform"
    x-transition:leave-end="opacity-0 scale-95 transform"
    @mouseenter="keepCard()"
    @mouseleave={openOnHover ? "hideCard()" : ""}
    x-cloak
    class={`absolute z-50 ${positionClasses[position]}`}
    :style="`max-width: ${hoverCardMaxWidth}`"
  >
    <div class={`bg-white rounded-lg shadow-lg border border-gray-200 overflow-hidden ${cardClass}`}>
      <!-- Custom card content slot takes precedence -->
      <slot name="card">
        <!-- Default simple content -->
        {content && (
          <div class="px-4 py-3">
            <p class="text-sm text-gray-700">{content}</p>
          </div>
        )}
      </slot>
    </div>
    
    <!-- Arrow -->
    {showArrow && (
      <div 
        class={`absolute w-0 h-0 border-4 ${arrowClasses[position]} ${arrowClass}`}
      ></div>
    )}
  </div>
</div>