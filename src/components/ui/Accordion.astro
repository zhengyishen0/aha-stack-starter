---
export interface Props {
  items: Array<{
    id?: string;
    title: string;
    content: string;
  }>;
  class?: string;
  allowMultiple?: boolean;
}

const { items, class: className = "", allowMultiple = false } = Astro.props;

// Convert items to JSON for Alpine.js
const itemsJson = JSON.stringify(items);

// Create the Alpine.js x-data object
const accordionData = `{
  items: ${itemsJson},
  allowMultiple: ${allowMultiple},
  
  handleToggle(el) {
    if (!this.allowMultiple && el.open) {
      // Close all other details elements
      el.parentElement.querySelectorAll('details[open]').forEach(detail => {
        if (detail !== el) detail.open = false;
      });
    }
  }
}`;

const getAccordionClasses = () => {
  const baseClass = 'accordion';
  return `${baseClass} ${className}`.trim();
};

const getAccordionItemClasses = () => {
  return 'accordion-item';
};

const getAccordionButtonClasses = () => {
  return 'accordion-button';
};

const getAccordionContentClasses = () => {
  return 'accordion-content';
};
---

<!-- 
Pine UI Accordion Component

Usage:
<Accordion 
  items={[
    { title: "Question 1", content: "Answer content here" },
    { title: "Question 2", content: "More answer content" }
  ]} 
  allowMultiple={false}
/>

Features:
- Native HTML details/summary for accessibility
- Optional Alpine.js enhancement for single-open behavior
- Smooth transitions
- Accessible by default
-->

<div 
  x-data={accordionData}
  class={getAccordionClasses()}
>
  <template x-for="(item, index) in items" :key="item.id || ('accordion-' + index)">
    <details 
      class={getAccordionItemClasses()}
      @toggle="handleToggle($el)"
    >
      <summary 
        class={getAccordionButtonClasses()}
      >
        <span class="accordion-title" x-text="item.title"></span>
        <svg 
          class="accordion-icon"
          fill="none" 
          stroke="currentColor" 
          viewBox="0 0 24 24"
        >
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
        </svg>
      </summary>
      <div 
        class={getAccordionContentClasses()}
      >
        <div class="accordion-text" x-text="item.content"></div>
      </div>
    </details>
  </template>
</div>