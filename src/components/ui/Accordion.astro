---
import { cn } from '../../lib/utils';

export interface Props {
  items: Array<{
    title: string;
    content: string;
  }>;
  // Styling props
  containerClass?: string;
  itemClass?: string;
  buttonClass?: string;
  contentClass?: string;
  // Icon props
  iconType?: 'chevron' | 'plus';
  iconClass?: string;
}

const {
  items,
  containerClass,
  itemClass,
  buttonClass,
  contentClass,
  iconType = 'chevron',
  iconClass
} = Astro.props;

const iconPaths = {
  chevron: '6,9 12,15 18,9'
};
---

<!-- 
Pine UI Accordion Component

Usage:
<Accordion 
  items={[
    { title: "What is Pines?", content: "Pines is a UI library built for AlpineJS and TailwindCSS." },
    { title: "How do I install it?", content: "You can install it via npm or use the CDN links." }
  ]}
  iconType="plus"
  containerClass="max-w-lg"
  itemClass="border-blue-200"
  buttonClass="text-blue-900"
  contentClass="text-gray-600 p-6"
/>

Features:
- Based on Pine UI's second accordion example
- Configurable chevron or plus icons
- Flexible styling with class merging
- Alpine.js x-for instead of server-side map
- CVA class merging for conflict resolution
-->

<div 
  x-data={`{ 
    items: ${JSON.stringify(items)},
    activeAccordion: '', 
    setActiveAccordion(id) { 
      this.activeAccordion = (this.activeAccordion == id) ? '' : id 
    } 
  }`}
  class={cn("relative w-full max-w-md mx-auto text-xs", containerClass)}
>
  <template x-for="(item, index) in items" :key="index">
    <div 
      x-data="{ id: $id('accordion') }" 
      :class={`"${cn(
        'duration-200 ease-out bg-white border rounded-md cursor-pointer group mb-2',
        'border-neutral-200/60 text-neutral-800',
        itemClass
      )}"`}
      x-cloak
    >
      <button 
        @click="setActiveAccordion(id)" 
        :class={`"${cn(
          'flex items-center justify-between w-full px-5 py-4 font-semibold text-left select-none',
          buttonClass
        )}"`}
        type="button"
      >
        <span x-text="item.title"></span>
        
        <!-- Dynamic Icon -->
        <div 
          class={cn(
            "relative flex items-center justify-center w-4 h-4 duration-300 ease-out",
            iconClass
          )}
        >
          {iconType === 'plus' ? (
            <div class="relative flex items-center justify-center w-3 h-3">
              <!-- Vertical line - hidden when active (minus state) -->
              <div 
                :class="{ 'opacity-0': activeAccordion==id }" 
                class="absolute w-0.5 h-full bg-neutral-500 group-hover:bg-neutral-800 rounded-full transition-opacity duration-300"
              ></div>
              <!-- Horizontal line - always visible -->
              <div class="absolute w-full h-0.5 bg-neutral-500 group-hover:bg-neutral-800 rounded-full"></div>
            </div>
          ) : (
            <svg 
              class="w-6 h-6 duration-200 ease-out text-neutral-500 group-hover:text-neutral-800" 
              :class="{ 'rotate-180': activeAccordion==id }" 
              viewBox="0 0 24 24" 
              xmlns="http://www.w3.org/2000/svg" 
              fill="none" 
              stroke="currentColor" 
              stroke-width="2" 
              stroke-linecap="round" 
              stroke-linejoin="round"
            >
              <polyline points={iconPaths[iconType]}></polyline>
            </svg>
          )}
        </div>
      </button>
      
      <div x-show="activeAccordion==id" x-collapse x-cloak>
        <div 
          :class={`"${cn('p-5 pt-0 opacity-70', contentClass)}"`} 
          x-text="item.content"
        ></div>
      </div>
    </div>
  </template>
</div>