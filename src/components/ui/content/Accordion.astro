---
export interface Props {
  items: Array<{
    id?: string;
    title: string;
    content: string;
    disabled?: boolean;
  }>;
  variant?: 'default' | 'bordered' | 'filled';
  context?: 'default' | 'compact' | 'spacious';
  allowMultiple?: boolean;
  class?: string;
}

const { 
  items, 
  variant = 'default',
  context = 'default',
  allowMultiple = false,
  class: className = ""
} = Astro.props;

// Convert items to JSON for Alpine.js
const itemsJson = JSON.stringify(items);

// Create the Alpine.js x-data object
const accordionData = `{
  items: ${itemsJson},
  allowMultiple: ${allowMultiple},
  
  handleToggle(el) {
    if (!this.allowMultiple && el.open) {
      // Close all other details elements
      el.parentElement.querySelectorAll('details[open]').forEach(detail => {
        if (detail !== el) detail.open = false;
      });
    }
  }
}`;

// Generate class names using true design system
const getComponentClasses = () => {
  const baseClass = 'accordion';
  const contextClass = context !== 'default' ? `${context}-accordion` : '';
  return `${baseClass} ${contextClass} ${className}`.trim();
};
---

<!-- 
TRUE Design System Accordion Component

Usage:
<Accordion 
  items={[
    { title: "Question 1", content: "Answer content here" },
    { title: "Question 2", content: "More answer content" }
  ]} 
/>

<Accordion variant="bordered" context="compact" items={...} />
<Accordion variant="filled" context="spacious" allowMultiple={true} items={...} />

Semantic Variants: default, bordered, filled
Contextual Variants: default, compact, spacious
-->

<div 
  x-data={accordionData}
  class={getComponentClasses()}
  data-variant={variant !== 'default' ? variant : null}
>
  <template x-for="(item, index) in items" :key="item.id || ('accordion-' + index)">
    <details 
      class="accordion-item"
      :data-state="item.disabled ? 'disabled' : null"
      @toggle="handleToggle($el)"
    >
      <summary 
        class="accordion-button"
        :disabled="item.disabled"
      >
        <span class="accordion-title" x-text="item.title"></span>
        <svg 
          class="accordion-icon"
          fill="none" 
          stroke="currentColor" 
          viewBox="0 0 24 24"
        >
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
        </svg>
      </summary>
      <div class="accordion-content">
        <div class="accordion-text" x-text="item.content"></div>
      </div>
    </details>
  </template>
</div>