---
export interface Props {
  content?: string;
  position?: 'top' | 'top-start' | 'top-end' | 'right' | 'right-start' | 'right-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end';
  context?: 'default' | 'compact' | 'minimal';
  showDelay?: number;
  hideDelay?: number;
  openOnHover?: boolean;
  openOnClick?: boolean;
  maxWidth?: string;
  class?: string;
  cardClass?: string;
  arrowClass?: string;
  showArrow?: boolean;
}

const { 
  content = "",
  position = 'top',
  context = 'default',
  showDelay = 500,
  hideDelay = 300,
  openOnHover = true,
  openOnClick = false,
  maxWidth = "320px",
  showArrow = true,
  class: className = "",
  cardClass = "",
  arrowClass = ""
} = Astro.props;

// Generate class names using true design system
const getComponentClasses = () => {
  const baseClass = 'hover-card';
  const contextClass = context !== 'default' ? `${context}-hover-card` : '';
  return `${baseClass} ${contextClass}`.trim();
};

const getPositionClasses = (position: string) => {
  return `hover-card-${position}`;
};

const getArrowClasses = () => {
  return 'hover-card-arrow';
};
---

<!-- 
Pine UI Hover Card Component

Usage:
<HoverCard 
  content="Quick preview content"
  position="top" 
  showDelay={500}
  hideDelay={300}
  maxWidth="320px"
>
  <Button>Hover for card</Button>
</HoverCard>

Advanced Usage with Custom Content:
<HoverCard position="bottom" showDelay={200}>
  <Button>Hover me</Button>
  
  <div slot="card">
    <div class="hover-card-body">
      <h3 style="font-weight: var(--font-weight-semibold); font-size: var(--text-lg); margin-bottom: var(--space-2);">Custom Card Content</h3>
      <p style="color: var(--color-text-secondary);">Rich content with images, links, and formatted text.</p>
      <div class="cluster" style="margin-top: var(--space-3);">
        <Button size="sm">Action 1</Button>
        <Button size="sm" variant="outline">Action 2</Button>
      </div>
    </div>
  </div>
</HoverCard>

Features:
- Configurable hover and hide delays
- Multiple positioning options with start/end variants
- Rich content support via slots
- Smooth transitions with Alpine.js
- Click or hover trigger options
- Customizable max width and styling
- Optional arrow indicator
- Timeout management for smooth UX
-->

<div 
  x-data={`{
    hoverCardHovered: false,
    hoverCardDelay: ${showDelay},
    hoverCardHideDelay: ${hideDelay},
    hoverCardTimeout: null,
    hoverCardHideTimeout: null,
    hoverCardPosition: '${position}',
    hoverCardMaxWidth: '${maxWidth}',
    openOnHover: ${openOnHover},
    openOnClick: ${openOnClick},
    
    showCard() {
      if (this.hoverCardHideTimeout) {
        clearTimeout(this.hoverCardHideTimeout);
        this.hoverCardHideTimeout = null;
      }
      
      if (!this.hoverCardHovered) {
        this.hoverCardTimeout = setTimeout(() => {
          this.hoverCardHovered = true;
        }, this.hoverCardDelay);
      }
    },
    
    hideCard() {
      if (this.hoverCardTimeout) {
        clearTimeout(this.hoverCardTimeout);
        this.hoverCardTimeout = null;
      }
      
      this.hoverCardHideTimeout = setTimeout(() => {
        this.hoverCardHovered = false;
      }, this.hoverCardHideDelay);
    },
    
    keepCard() {
      if (this.hoverCardHideTimeout) {
        clearTimeout(this.hoverCardHideTimeout);
        this.hoverCardHideTimeout = null;
      }
    }
  }`}
  class={`${getComponentClasses()} ${className}`}
  @mouseenter={openOnHover ? "showCard()" : ""}
  @mouseleave={openOnHover ? "hideCard()" : ""}
  @click={openOnClick ? "hoverCardHovered = !hoverCardHovered" : ""}
>
  <!-- Trigger element -->
  <div class="hover-card-trigger">
    <slot />
  </div>
  
  <!-- Hover Card -->
  <div 
    x-show="hoverCardHovered"
    x-transition:enter="transition ease-out duration-200"
    x-transition:enter-start="opacity-0 scale-95 transform"
    x-transition:enter-end="opacity-100 scale-100 transform"
    x-transition:leave="transition ease-in duration-150"
    x-transition:leave-start="opacity-100 scale-100 transform"
    x-transition:leave-end="opacity-0 scale-95 transform"
    @mouseenter="keepCard()"
    @mouseleave={openOnHover ? "hideCard()" : ""}
    x-cloak
    class={`hover-card-content ${getPositionClasses(position)} ${cardClass}`}
    :style="`max-width: ${hoverCardMaxWidth}`"
    data-position={position !== 'top' ? position : null}
  >
    <!-- Custom card content slot takes precedence -->
    <slot name="card">
      <!-- Default simple content -->
      {content && (
        <div class="hover-card-body">
          <p>{content}</p>
        </div>
      )}
    </slot>
    
    <!-- Arrow -->
    {showArrow && (
      <div 
        class={`${getArrowClasses()} ${arrowClass}`}
      ></div>
    )}
  </div>
</div>