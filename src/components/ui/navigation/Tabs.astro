---
export interface Props {
  tabs: Array<{
    id: string;
    label: string;
    content?: string;
    disabled?: boolean;
  }>;
  defaultTab?: string;
  variant?: 'underline' | 'pills' | 'enclosed';
  class?: string;
  contentClass?: string;
}

const { 
  tabs,
  defaultTab = tabs[0]?.id,
  variant = 'underline',
  class: className = "",
  contentClass = ""
} = Astro.props;

const variantClasses = {
  underline: {
    nav: 'border-b border-neutral-200',
    tab: 'border-b-2 border-transparent hover:border-neutral-300 focus:border-neutral-300',
    activeTab: 'border-blue-500 text-blue-600',
    inactiveTab: 'text-neutral-500 hover:text-neutral-700'
  },
  pills: {
    nav: '',
    tab: 'rounded-md hover:bg-neutral-100 focus:bg-neutral-100',
    activeTab: 'bg-blue-100 text-blue-700',
    inactiveTab: 'text-neutral-500 hover:text-neutral-700'
  },
  enclosed: {
    nav: 'border-b border-neutral-200',
    tab: 'border border-transparent rounded-t-lg hover:border-neutral-300 focus:border-neutral-300',
    activeTab: 'border-neutral-300 border-b-white bg-white text-neutral-900',
    inactiveTab: 'text-neutral-500 hover:text-neutral-700'
  }
};
---

<!-- 
Pine UI Tabs Component

Usage:
<Tabs 
  tabs={[
    { id: "tab1", label: "Overview", content: "Overview content..." },
    { id: "tab2", label: "Analytics", content: "Analytics content..." },
    { id: "tab3", label: "Settings", content: "Settings content...", disabled: true }
  ]}
  defaultTab="tab1"
  variant="underline"
/>

Features:
- Multiple variants (underline, pills, enclosed)
- Disabled tabs
- Keyboard navigation
- Content slots or props
- Alpine.js powered switching
-->

<div 
  x-data={`{
    tabSelected: '${defaultTab}',
    tabId: $id('tab'),
    tabButtonClicked(tabButton) {
      this.tabSelected = tabButton.id.replace(this.tabId + '-', '');
      this.tabRepositionMarker(tabButton);
    },
    tabRepositionMarker(tabButton) {
      this.$refs.tabMarker.style.width = tabButton.offsetWidth + 'px';
      this.$refs.tabMarker.style.height = tabButton.offsetHeight + 'px';
      this.$refs.tabMarker.style.left = tabButton.offsetLeft + 'px';
    },
    tabContentActive(tabContent) {
      return this.tabSelected == tabContent.id.replace(this.tabId + '-content-', '');
    }
  }`}
  x-init="tabRepositionMarker($refs.tabButtons.children[tabSelected]);"
  class={`w-full ${className}`}
>
  <!-- Tab Navigation -->
  <div class={`relative ${variantClasses[variant].nav}`}>
    <div x-ref="tabButtons" class="flex space-x-1">
      {tabs.map((tab) => (
        <button 
          :id="`${tabId}-${tab.id}`"
          @click="tabButtonClicked($el)"
          :class="tabSelected === '${tab.id}' ? '${variantClasses[variant].activeTab}' : '${variantClasses[variant].inactiveTab}'"
          class={`px-4 py-2 text-sm font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${variantClasses[variant].tab} ${tab.disabled ? 'opacity-50 cursor-not-allowed' : ''}`}
          disabled={tab.disabled}
          type="button"
        >
          {tab.label}
        </button>
      ))}
    </div>
    
    <!-- Moving marker for pills variant -->
    {variant === 'pills' && (
      <div 
        x-ref="tabMarker" 
        class="absolute top-0 z-10 bg-blue-500 rounded-md transition-all duration-300 ease-out"
        style="height: 100%;"
      ></div>
    )}
  </div>
  
  <!-- Tab Content -->
  <div class={`mt-4 ${contentClass}`}>
    {tabs.map((tab) => (
      <div 
        :id="`${tabId}-content-${tab.id}`"
        x-show="tabSelected === '${tab.id}'"
        class="tab-content"
      >
        <div set:html={tab.content || ''} />
      </div>
    ))}
  </div>
</div>