---
export interface Props {
  variant?: 'default' | 'danger';
  context?: 'default' | 'hero' | 'nav' | 'form' | 'icon' | 'xs';
  disabled?: boolean;
  type?: 'button' | 'submit' | 'reset';
  href?: string;
  target?: string;
  class?: string;
  [key: string]: any; // Allow any Alpine.js attributes
}

const { 
  variant = 'default',
  context = 'default',
  disabled = false,
  type = 'button',
  href,
  target,
  class: className = "",
  ...rest
} = Astro.props;

// Generate class names using true design system
const getButtonClasses = () => {
  const baseClass = 'button';
  const contextClass = context !== 'default' ? `${context}-button` : '';
  
  return `${baseClass} ${contextClass}`.trim();
};
---

<!-- 
TRUE Design System Button Component

Usage:
<Button>Default Action</Button>
<Button variant="danger">Delete Item</Button>
<Button context="hero">Get Started</Button>
<Button context="nav">Menu</Button>

Semantic Variants: default, danger
Contextual Variants: default, hero, nav, form, icon
-->

{href ? (
  <a
    href={href}
    target={target}
    class={`${getButtonClasses()} ${className}`}
    data-variant={variant !== 'default' ? variant : null}
    data-state={disabled ? 'disabled' : null}
    style="text-decoration: none;"
    {...rest}
  >
    <slot />
  </a>
) : (
  <button 
    type={type}
    disabled={disabled}
    class={`${getButtonClasses()} ${className}`}
    data-variant={variant !== 'default' ? variant : null}
    data-state={disabled ? 'disabled' : null}
    {...rest}
  >
    <slot />
  </button>
)}