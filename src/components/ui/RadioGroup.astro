---
export interface Props {
  name: string;
  options: Array<{
    value: string;
    title: string;
    description?: string;
    disabled?: boolean;
  }>;
  selectedValue?: string;
  context?: 'default' | 'form' | 'hero';
  disabled?: boolean;
  class?: string;
}

const { 
  name,
  options,
  selectedValue = '',
  context = 'default',
  disabled = false,
  class: className = ""
} = Astro.props;

// Generate class names using true design system
const getComponentClasses = () => {
  const baseClass = 'radio-group';
  const contextClass = context !== 'default' ? `${context}-radio` : '';
  return `${baseClass} ${contextClass} ${className}`.trim();
};
---

<!-- 
TRUE Design System RadioGroup Component

Usage:
<RadioGroup 
  name="plan"
  options={[
    { 
      value: "basic", 
      title: "Basic Plan", 
      description: "Perfect for small teams" 
    },
    { 
      value: "pro", 
      title: "Pro Plan", 
      description: "Best for growing businesses" 
    }
  ]}
  selectedValue="basic"
/>

<RadioGroup context="form" name="settings" options={...} />
<RadioGroup context="hero" name="plan" options={...} />

Contextual Variants: default, form (small), hero (large)
States: default, disabled
-->

<div 
  x-data={`{
    radioGroupSelectedValue: '${selectedValue}',
    radioGroupOptions: ${JSON.stringify(options)}
  }`}
  class={getComponentClasses()}
>
  <template x-for="(option, index) in radioGroupOptions" :key="option.value">
    <div 
      class="radio-option"
      :data-state="(option.disabled || ${disabled}) ? 'disabled' : (radioGroupSelectedValue === option.value ? 'selected' : null)"
      @click="if (!option.disabled && !${disabled}) { radioGroupSelectedValue = option.value }"
    >
      <div class="radio-input-wrapper">
        <input 
          :id="name + '-' + option.value"
          :name="name"
          type="radio" 
          :value="option.value"
          x-model="radioGroupSelectedValue"
          :disabled="option.disabled || ${disabled}"
          class="radio"
        />
      </div>
      <div class="radio-content">
        <label 
          :for="name + '-' + option.value" 
          class="radio-title"
          x-text="option.title"
        ></label>
        <p 
          x-show="option.description" 
          x-text="option.description"
          class="radio-description"
        ></p>
      </div>
    </div>
  </template>
</div>