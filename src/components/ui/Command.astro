---
export interface Props {
  id?: string;
  placeholder?: string;
  class?: string;
  maxHeight?: string;
  showShortcuts?: boolean;
}

const { 
  id = 'command-palette',
  placeholder = 'Type a command or search...',
  class: className = "",
  maxHeight = '400px',
  showShortcuts = true
} = Astro.props;

// Generate class names using our design system
const getComponentClasses = () => {
  return {
    command: 'command',
    backdrop: 'command-backdrop',
    inputContainer: 'command-input-container',
    inputIcon: 'command-input-icon',
    input: 'command-input',
    shortcuts: 'command-shortcuts',
    list: 'command-list',
    group: 'command-group',
    groupHeader: 'command-group-header',
    item: 'command-item',
    itemActive: 'command-item-active',
    itemText: 'command-item-text',
    empty: 'command-empty',
    emptyIcon: 'command-empty-icon',
    emptyTitle: 'command-empty-title',
    emptyDescription: 'command-empty-description',
    footer: 'command-footer',
    footerControls: 'command-footer-controls',
    footerControl: 'command-footer-control',
    footerShortcut: 'command-footer-shortcut',
    kbd: 'command-kbd'
  };
};

const classes = getComponentClasses();
---

<!-- 
Pine UI Command Component

Usage:
<Command placeholder="Search commands...">
  <div slot="trigger">
    <Button>Open Command Palette</Button>
  </div>
  
  <div slot="commands">
    <div data-group="Navigation">
      <div data-command="home" data-keywords="home dashboard main" data-shortcut="⌘H">
        <span>Go to Home</span>
      </div>
      <div data-command="profile" data-keywords="profile user account settings" data-shortcut="⌘P">
        <span>View Profile</span>
      </div>
    </div>
    
    <div data-group="Actions">
      <div data-command="create" data-keywords="create new add post article" data-shortcut="⌘N">
        <span>Create New Post</span>
      </div>
      <div data-command="save" data-keywords="save document file" data-shortcut="⌘S">
        <span>Save Document</span>
      </div>
    </div>
  </div>
</Command>

Features:
- Real-time search filtering
- Keyboard navigation (↑↓ arrows, Enter, Escape)
- Command grouping
- Keyboard shortcuts display
- Click outside to close
- Customizable placeholder and styling
- Alpine.js powered
- Accessible focus management

Data Attributes:
- data-group: Group name for command organization
- data-command: Unique command identifier
- data-keywords: Space-separated search terms
- data-shortcut: Keyboard shortcut display (optional)

Events:
- Dispatches 'command-selected' event with command data when item is selected
-->

<div 
  x-data="{
    commandOpen: false,
    commandQuery: '',
    commandItems: [],
    commandItemsFiltered: [],
    commandItemActive: 0,
    
    init() {
      // Parse command items from slot content
      this.$nextTick(() => {
        const commandSlot = this.$refs.commandSlot;
        if (commandSlot) {
          const groups = commandSlot.querySelectorAll('[data-group]');
          this.commandItems = [];
          
          groups.forEach(group => {
            const groupName = group.getAttribute('data-group');
            const commands = group.querySelectorAll('[data-command]');
            
            commands.forEach(cmd => {
              this.commandItems.push({
                id: cmd.getAttribute('data-command'),
                text: cmd.textContent.trim(),
                keywords: cmd.getAttribute('data-keywords') || '',
                shortcut: cmd.getAttribute('data-shortcut') || '',
                group: groupName,
                element: cmd
              });
            });
          });
          
          this.filterCommands();
        }
      });
    },
    
    openCommand() {
      this.commandOpen = true;
      this.commandQuery = '';
      this.commandItemActive = 0;
      this.filterCommands();
      this.$nextTick(() => {
        this.$refs.commandInput?.focus();
      });
    },
    
    closeCommand() {
      this.commandOpen = false;
      this.commandQuery = '';
      this.commandItemActive = 0;
    },
    
    filterCommands() {
      if (!this.commandQuery.trim()) {
        this.commandItemsFiltered = this.commandItems;
      } else {
        const query = this.commandQuery.toLowerCase();
        this.commandItemsFiltered = this.commandItems.filter(item => {
          return item.text.toLowerCase().includes(query) ||
                 item.keywords.toLowerCase().includes(query) ||
                 item.id.toLowerCase().includes(query);
        });
      }
      this.commandItemActive = 0;
    },
    
    selectCommand(item) {
      this.closeCommand();
      // Dispatch custom event
      this.$dispatch('command-selected', {
        id: item.id,
        text: item.text,
        group: item.group
      });
    },
    
    executeActiveCommand() {
      if (this.commandItemsFiltered.length > 0) {
        this.selectCommand(this.commandItemsFiltered[this.commandItemActive]);
      }
    },
    
    navigateCommand(direction) {
      if (direction === 'up') {
        this.commandItemActive = this.commandItemActive > 0 
          ? this.commandItemActive - 1 
          : this.commandItemsFiltered.length - 1;
      } else {
        this.commandItemActive = this.commandItemActive < this.commandItemsFiltered.length - 1 
          ? this.commandItemActive + 1 
          : 0;
      }
    },
    
    getGroupedCommands() {
      const grouped = {};
      this.commandItemsFiltered.forEach(item => {
        if (!grouped[item.group]) {
          grouped[item.group] = [];
        }
        grouped[item.group].push(item);
      });
      return grouped;
    }
  }"
  @keydown.cmd.k.window.prevent="openCommand()"
  @keydown.ctrl.k.window.prevent="openCommand()"
  class="relative z-50 w-auto h-auto"
>
  <!-- Trigger -->
  <div @click="openCommand()">
    <slot name="trigger" />
  </div>
  
  <!-- Hidden slot for parsing commands -->
  <div x-ref="commandSlot" class="hidden">
    <slot name="commands" />
  </div>
  
  <!-- Command Palette Modal -->
  <template x-teleport="body">
    <div 
      x-show="commandOpen" 
      x-transition.opacity.duration.200ms
      class={classes.backdrop}
      @click.self="closeCommand()"
      @keydown.escape="closeCommand()"
      @keydown.arrow-up.prevent="navigateCommand('up')"
      @keydown.arrow-down.prevent="navigateCommand('down')"
      @keydown.enter.prevent="executeActiveCommand()"
    >
      <div 
        x-show="commandOpen"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0 scale-95 translate-y-4"
        x-transition:enter-end="opacity-100 scale-100 translate-y-0"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-100 scale-100 translate-y-0"
        x-transition:leave-end="opacity-0 scale-95 translate-y-4"
        class={`${classes.command} ${className}`}
      >
        <!-- Search Input -->
        <div class={classes.inputContainer}>
          <svg class={classes.inputIcon} fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
          <input
            x-ref="commandInput"
            x-model="commandQuery"
            @input="filterCommands()"
            type="text"
            placeholder={placeholder}
            class={classes.input}
          />
          <div class={classes.shortcuts}>
            <kbd class={classes.kbd}>Esc</kbd>
          </div>
        </div>
        
        <!-- Command List -->
        <div 
          class={classes.list}
          :style="`max-height: ${maxHeight}`"
        >
          <template x-for="(group, groupName) in getGroupedCommands()" :key="groupName">
            <div class={classes.group}>
              <!-- Group Header -->
              <div class={classes.groupHeader}>
                <span x-text="groupName"></span>
              </div>
              
              <!-- Group Commands -->
              <template x-for="(item, index) in group" :key="item.id">
                <div
                  @click="selectCommand(item)"
                  :class="{
                    'command-item-active': commandItemsFiltered.indexOf(item) === commandItemActive
                  }"
                  class={classes.item}
                >
                  <span x-text="item.text" class={classes.itemText}></span>
                  <template x-if="showShortcuts && item.shortcut">
                    <kbd 
                      x-text="item.shortcut"
                      class={classes.kbd}
                    ></kbd>
                  </template>
                </div>
              </template>
            </div>
          </template>
          
          <!-- No Results -->
          <template x-if="commandItemsFiltered.length === 0 && commandQuery.trim()">
            <div class={classes.empty}>
              <svg class={classes.emptyIcon} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.34 0-4.467-.881-6.084-2.324.208-.35.498-.644.849-.844L8 11.25c.287-.29.635-.447 1-.447s.713.157 1 .447l1.235.582c.351.2.641.494.849.844C13.467 14.119 11.34 15 9 15z"></path>
              </svg>
              <p class={classes.emptyTitle}>No commands found</p>
              <p class={classes.emptyDescription}>Try a different search term</p>
            </div>
          </template>
        </div>
        
        <!-- Footer -->
        <div class={classes.footer}>
          <div class={classes.footerControls}>
            <div class={classes.footerControl}>
              <kbd class={classes.kbd}>↑↓</kbd>
              <span>Navigate</span>
            </div>
            <div class={classes.footerControl}>
              <kbd class={classes.kbd}>↵</kbd>
              <span>Select</span>
            </div>
          </div>
          <div class={classes.footerShortcut}>
            <kbd class={classes.kbd}>⌘K</kbd>
            <span>Open</span>
          </div>
        </div>
      </div>
    </div>
  </template>
</div>