---
export interface Props {
  value?: number;
  max?: number;
  variant?: 'default' | 'success' | 'warning' | 'error';
  context?: 'default' | 'thin' | 'thick';
  showLabel?: boolean;
  autoIncrement?: boolean;
  incrementInterval?: number;
  class?: string;
  [key: string]: any; // Allow any Alpine.js attributes
}

const { 
  value = 0,
  max = 100,
  variant = 'default',
  context = 'default',
  showLabel = false,
  autoIncrement = false,
  incrementInterval = 100,
  class: className = "",
  ...rest
} = Astro.props;

// Generate class names using true design system
const getProgressClasses = () => {
  const baseClass = 'progress';
  const contextClass = context !== 'default' ? `${context}-progress` : '';
  return `${baseClass} ${contextClass} ${className}`.trim();
};
---

<!-- 
TRUE Design System Progress Component

Usage:
<Progress value={75} max={100} />
<Progress variant="success" value={100} />
<Progress variant="warning" value={50} showLabel={true} />
<Progress context="thin" variant="error" value={25} />

Semantic Variants: default, success, warning, error
Contextual Variants: default, thin, thick
-->

<div 
  x-data={`{
    progress: ${value},
    max: ${max},
    autoIncrement: ${autoIncrement},
    incrementInterval: ${incrementInterval},
    progressInterval: null,
    
    get percentage() {
      return Math.min((this.progress / this.max) * 100, 100);
    },
    
    startAutoIncrement() {
      if (!this.autoIncrement) return;
      
      this.progressInterval = setInterval(() => {
        if (this.progress < this.max) {
          this.progress += 1;
        } else {
          clearInterval(this.progressInterval);
        }
      }, this.incrementInterval);
    },
    
    resetProgress() {
      this.progress = 0;
      if (this.progressInterval) {
        clearInterval(this.progressInterval);
      }
      if (this.autoIncrement) {
        this.startAutoIncrement();
      }
    }
  }`}
  x-init="
    if (autoIncrement) {
      startAutoIncrement();
    }
  "
  class="progress-wrapper"
  {...rest}
>
  <!-- Progress label -->
  {showLabel && (
    <div class="progress-label-container">
      <span class="progress-label">Progress</span>
      <span class="progress-value" x-text="`${Math.round(percentage)}%`"></span>
    </div>
  )}
  
  <!-- Progress element -->
  <div 
    class={getProgressClasses()}
    data-variant={variant !== 'default' ? variant : null}
  >
    <div 
      class="progress-bar"
      :style="`width: ${percentage}%`"
    ></div>
  </div>
  
  <!-- Auto-increment controls -->
  {autoIncrement && (
    <div class="progress-controls">
      <button 
        @click="resetProgress()"
        class="button nav-button"
        type="button"
      >
        Reset
      </button>
    </div>
  )}
</div>