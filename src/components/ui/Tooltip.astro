---
export interface Props {
  content: string;
  position?: 'top' | 'right' | 'bottom' | 'left';
  showArrow?: boolean;
  delay?: number;
  class?: string;
  tooltipClass?: string;
}

const { 
  content,
  position = 'top',
  showArrow = true,
  delay = 0,
  class: className = "",
  tooltipClass = ""
} = Astro.props;

const getComponentClasses = () => {
  const baseClass = 'tooltip';
  const positionClass = position ? `tooltip-${position}` : '';
  return `${baseClass} ${positionClass} ${tooltipClass}`.trim();
};
---

<!-- 
Pine UI Tooltip Component

Usage:
<Tooltip content="This is a helpful tooltip" position="top" showArrow={true}>
  <Button>Hover me</Button>
</Tooltip>

Features:
- Multiple positions (top, right, bottom, left)
- Optional arrow
- Configurable delay
- Hover triggers
- Alpine.js powered
-->

<div 
  x-data={`{
    tooltipVisible: false,
    tooltipText: '${content}',
    tooltipArrow: ${showArrow},
    tooltipPosition: '${position}',
    tooltipDelay: ${delay}
  }`}
  @mouseenter="setTimeout(() => { tooltipVisible = true }, tooltipDelay)"
  @mouseleave="tooltipVisible = false"
  class={`relative inline-block ${className}`}
>
  <!-- Trigger element -->
  <slot />
  
  <!-- Tooltip -->
  <div 
    x-show="tooltipVisible"
    x-transition:enter="transition ease-out duration-200"
    x-transition:enter-start="opacity-0 scale-95"
    x-transition:enter-end="opacity-100 scale-100"
    x-transition:leave="transition ease-in duration-75"
    x-transition:leave-start="opacity-100 scale-100"
    x-transition:leave-end="opacity-0 scale-95"
    class={getComponentClasses()}
    x-cloak
  >
    <span class="tooltip-content" x-text="tooltipText"></span>
    
    <!-- Arrow -->
    {showArrow && (
      <div class="tooltip-arrow"></div>
    )}
  </div>
</div>