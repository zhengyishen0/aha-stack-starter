---
export interface Props {
  texts: string[];
  typeSpeed?: number;
  deleteSpeed?: number;
  pauseEnd?: number;
  pauseStart?: number;
  cursorChar?: string;
  size?: 'sm' | 'md' | 'lg' | 'xl';
  color?: 'primary' | 'secondary' | 'neutral' | 'blue' | 'red' | 'green' | 'yellow' | 'purple';
  class?: string;
}

const { 
  texts,
  typeSpeed = 100,
  deleteSpeed = 50,
  pauseEnd = 2000,
  pauseStart = 20,
  cursorChar = '|',
  size = 'md',
  color = 'primary',
  class: className = ""
} = Astro.props;

// Generate class names using our design system
const getComponentClasses = () => {
  const baseClass = 'typing-effect';
  const sizeClass = `typing-effect-${size}`;
  const colorClass = `typing-effect-${color}`;
  
  return `${baseClass} ${sizeClass} ${colorClass}`;
};
---

<!-- 
Pine UI Typing Effect Component

Usage:
<TypingEffect 
  texts={["Hello World!", "Welcome to Pine UI", "Built with Alpine.js"]}
  typeSpeed={100}
  deleteSpeed={50}
  pauseEnd={2000}
  size="md"
  color="primary"
/>

Sizes: sm, md, lg, xl
Colors: primary, secondary, neutral, blue, red, green, yellow, purple

Features:
- Multiple text cycling
- Configurable typing speeds
- Blinking cursor animation
- Design system integration
- Alpine.js powered
-->

<div 
  x-data={`{
    textArray: ${JSON.stringify(texts)},
    textArrayIndex: 0,
    charIndex: 0,
    pauseEnd: ${pauseEnd},
    pauseStart: ${pauseStart},
    typeSpeed: ${typeSpeed},
    deleteSpeed: ${deleteSpeed},
    cursorSpeed: 500,
    cursorChar: ${JSON.stringify(cursorChar)},
    text: '',
    cursor: true,
    
    typeText() {
      this.text = this.textArray[this.textArrayIndex].substring(0, this.charIndex);
      this.charIndex++;
      
      if (this.charIndex === this.textArray[this.textArrayIndex].length + 1) {
        this.charIndex = this.textArray[this.textArrayIndex].length;
        setTimeout(() => this.deleteText(), this.pauseEnd);
      } else {
        setTimeout(() => this.typeText(), this.typeSpeed);
      }
    },
    
    deleteText() {
      this.text = this.textArray[this.textArrayIndex].substring(0, this.charIndex);
      this.charIndex--;
      
      if (this.charIndex === -1) {
        this.charIndex = 0;
        this.textArrayIndex++;
        
        if (this.textArrayIndex >= this.textArray.length) {
          this.textArrayIndex = 0;
        }
        
        setTimeout(() => this.typeText(), this.pauseStart);
      } else {
        setTimeout(() => this.deleteText(), this.deleteSpeed);
      }
    },
    
    blinkCursor() {
      this.cursor = !this.cursor;
      setTimeout(() => this.blinkCursor(), this.cursorSpeed);
    }
  }`}
  x-init="
    setTimeout(() => typeText(), pauseStart);
    blinkCursor();
  "
  class={`${getComponentClasses()} ${className}`}
>
  <span x-text="text" class="typing-effect-text"></span><span x-show="cursor" x-text="cursorChar" class="typing-effect-cursor"></span>
</div>