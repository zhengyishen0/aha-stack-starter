---
export interface Props {
  placeholder?: string;
  value?: string;
  disabled?: boolean;
  readonly?: boolean;
  required?: boolean;
  name?: string;
  id?: string;
  label?: string;
  description?: string;
  error?: string;
  rows?: number;
  context?: 'default' | 'form' | 'hero';
  class?: string;
  textareaClass?: string;
}

const { 
  placeholder,
  value = '',
  disabled = false,
  readonly = false,
  required = false,
  name,
  id,
  label,
  description,
  error,
  rows = 4,
  context = 'default',
  class: className = "",
  textareaClass = ""
} = Astro.props;

// Generate class names using true design system
const getComponentClasses = () => {
  const baseClass = 'textarea';
  const contextClass = context !== 'default' ? `${context}-textarea` : '';
  return `${baseClass} ${contextClass} ${textareaClass}`.trim();
};

const getTextareaState = () => {
  if (disabled) return 'disabled';
  if (readonly) return 'readonly';
  if (error) return 'error';
  return null;
};
---

<div class={`form-field ${className}`}>
  {label && (
    <label 
      for={id}
      class={`form-label ${disabled ? 'form-label--disabled' : ''}`}
    >
      {label}
      {required && <span class="form-required">*</span>}
    </label>
  )}
  
  <textarea 
    id={id}
    name={name}
    placeholder={placeholder}
    disabled={disabled}
    readonly={readonly}
    required={required}
    rows={rows}
    class={getComponentClasses()}
    data-state={getTextareaState()}
  >{value}</textarea>
  
  {description && !error && (
    <p class={`form-description ${disabled ? 'form-description--disabled' : ''}`}>
      {description}
    </p>
  )}
  
  {error && (
    <p class="form-error">
      <svg class="form-error-icon" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
      </svg>
      {error}
    </p>
  )}
</div>