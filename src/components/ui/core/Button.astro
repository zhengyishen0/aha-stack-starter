---
// Import component styles
import '/src/styles/components/button.css';

export interface Props {
  variant?: 'solid' | 'outline';
  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
  disabled?: boolean;
  type?: 'button' | 'submit' | 'reset';
  href?: string;
  target?: string;
  class?: string;
  [key: string]: any; // Allow any Alpine.js attributes
}

const { 
  variant = 'solid',
  size = 'md',
  disabled = false,
  type = 'button',
  href,
  target,
  class: className = "",
  ...rest
} = Astro.props;

// Generate class names using true design system
const getButtonClasses = () => {
  const baseClass = 'button';
  const variantClass = `button-${variant}`;
  const sizeClass = size !== 'md' ? `button-${size}` : '';
  
  return `${baseClass} ${variantClass} ${sizeClass} ${className}`.trim();
};
---

<!-- 
TRUE Design System Button Component

Usage:
<Button>Default Action</Button>
<Button variant="outline">Secondary Action</Button>
<Button size="lg">Large Button</Button>
<Button size="sm">Small Button</Button>

Props:
- variant: solid (default), outline
- size: xs, sm, md (default), lg, xl
-->

{href ? (
  <a
    href={href}
    target={target}
    class={getButtonClasses()}
    data-variant={variant}
    data-size={size}
    data-state={disabled ? 'disabled' : null}
    style="text-decoration: none;"
    {...rest}
  >
    <slot />
  </a>
) : (
  <button 
    type={type}
    disabled={disabled}
    class={getButtonClasses()}
    data-variant={variant}
    data-size={size}
    data-state={disabled ? 'disabled' : null}
    {...rest}
  >
    <slot />
  </button>
)}