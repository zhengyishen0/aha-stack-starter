---
// Import co-located component styles
import './card.css';

export interface Props {
  variant?: 'flat' | 'subtle' | 'elevated' | 'floating';
  color?: 'default' | 'primary' | 'danger' | 'success' | 'warning';
  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
  rounded?: 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | 'full';
  loading?: boolean;
  disabled?: boolean;
  selected?: boolean;
  clickable?: boolean;
  href?: string;
  class?: string;
  headerClass?: string;
  bodyClass?: string;
  footerClass?: string;
  [key: string]: any; // Allow any Alpine.js attributes
}

const { 
  variant = 'flat',
  color = 'default',
  size = 'lg',
  rounded = 'lg',
  loading = false,
  disabled = false,
  selected = false,
  clickable = false,
  href,
  class: className = "",
  headerClass = "",
  bodyClass = "",
  footerClass = "",
  ...rest
} = Astro.props;

// Generate CUBE CSS classes
const classes = [
  'card',
  variant !== 'flat' && `variant-${variant}`,
  color !== 'default' && `color-${color}`,
  `size-${size}`,
  rounded !== 'lg' && `rounded-${rounded}`,
  loading && 'is-loading',
  disabled && 'is-disabled',
  selected && 'is-selected',
  (clickable || href) && 'clickable',
  className
].filter(Boolean).join(' ');

const Tag = href ? 'a' : 'article';
const tagProps = href 
  ? { href, style: "text-decoration: none;" }
  : {};
---

<!-- 
CUBE CSS Card Component

Usage:
<Card>
  <div slot="header">
    <h2>Title</h2>
  </div>
  <div slot="body">
    <p>Content goes here...</p>
  </div>
  <div slot="footer">
    <Button>Action</Button>
  </div>
</Card>

<Card variant="elevated" size="sm">
  <p>Simple card content</p>
</Card>

<Card href="/link" variant="subtle">
  <p>Clickable card</p>
</Card>

New Props:
- variant: flat (default), subtle, elevated, floating
- color: default, primary, danger, success, warning
- size: xs, sm, md, lg (default), xl
- rounded: none, xs, sm, md, lg (default), xl, 2xl, 3xl, full
- loading, disabled, selected: boolean states
- clickable: makes card interactive
- href: makes card a link
-->

<Tag 
  class={classes}
  {...tagProps}
  {...rest}
>
  <!-- Header -->
  {Astro.slots.header && (
    <header class={`card-header ${headerClass}`}>
      <slot name="header" />
    </header>
  )}
  
  <!-- Body - main content area -->
  <div class={`card-body ${bodyClass}`}>
    <slot name="body" />
    <slot />
  </div>
  
  <!-- Footer -->
  {Astro.slots.footer && (
    <footer class={`card-footer ${footerClass}`}>
      <slot name="footer" />
    </footer>
  )}
</Tag>