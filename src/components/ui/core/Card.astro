---
export interface Props {
  variant?: 'default' | 'elevated';
  context?: 'default' | 'compact' | 'spacious';
  class?: string;
  headerClass?: string;
  bodyClass?: string;
  footerClass?: string;
  [key: string]: any; // Allow any Alpine.js attributes
}

const { 
  variant = 'default',
  context = 'default',
  class: className = "",
  headerClass = "",
  bodyClass = "",
  footerClass = "",
  ...rest
} = Astro.props;

// Generate class names using true design system
const getCardClasses = () => {
  const baseClass = 'card';
  const contextClass = context !== 'default' ? `${context}-card` : '';
  
  return `${baseClass} ${contextClass}`.trim();
};
---

<!-- 
TRUE Design System Card Component

Usage:
<Card>
  <div slot="header">
    <h2>Card Title</h2>
  </div>
  
  <div slot="body">
    <p>Card content goes here...</p>
  </div>
  
  <div slot="footer">
    <Button>Action</Button>
  </div>
</Card>

<Card variant="elevated" context="compact">
  <div slot="body">Compact elevated card</div>
</Card>

Semantic Variants: default, elevated
Contextual Variants: default, compact, spacious
-->

<article 
  class={`${getCardClasses()} ${className}`}
  data-variant={variant !== 'default' ? variant : null}
  {...rest}
>
  <!-- Header -->
  {Astro.slots.header && (
    <header class={`card-header ${headerClass}`}>
      <slot name="header" />
    </header>
  )}
  
  <!-- Body -->
  <section class={`card-body ${bodyClass}`}>
    <slot name="body" />
    <slot />
  </section>
  
  <!-- Footer -->
  {Astro.slots.footer && (
    <footer class={`card-footer ${footerClass}`}>
      <slot name="footer" />
    </footer>
  )}
</article>