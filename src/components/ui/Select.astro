---
export interface Props {
  options: Array<{
    value: string;
    label: string;
    disabled?: boolean;
  }>;
  placeholder?: string;
  selectedValue?: string;
  searchable?: boolean;
  disabled?: boolean;
  name?: string;
  id?: string;
  class?: string;
}

const { 
  options,
  placeholder = "Select an option...",
  selectedValue = '',
  searchable = false,
  disabled = false,
  name,
  id,
  class: className = ""
} = Astro.props;

const getSelectClasses = () => {
  const baseClass = 'select';
  const disabledClass = disabled ? 'select--disabled' : '';
  
  return [baseClass, disabledClass]
    .filter(Boolean)
    .join(' ');
};
---

<!-- 
Pine UI Select Component

Usage:
<Select 
  options={[
    { value: "option1", label: "Option 1" },
    { value: "option2", label: "Option 2" },
    { value: "option3", label: "Option 3", disabled: true }
  ]}
  placeholder="Choose an option..."
  searchable={true}
  selectedValue="option1"
/>

Features:
- Searchable dropdown
- Keyboard navigation
- Disabled options
- Custom positioning
- Alpine.js powered
-->

<div 
  x-data={`{
    selectOpen: false,
    selectedItem: '${selectedValue}',
    selectableItems: ${JSON.stringify(options)},
    searchTerm: '',
    selectId: $id('select'),
    
    get filteredItems() {
      if (!this.searchTerm) return this.selectableItems;
      return this.selectableItems.filter(item => 
        item.label.toLowerCase().includes(this.searchTerm.toLowerCase())
      );
    },
    
    get selectedLabel() {
      const item = this.selectableItems.find(item => item.value === this.selectedItem);
      return item ? item.label : \`${placeholder}\`;
    },
    
    selectItem(item) {
      if (item.disabled) return;
      this.selectedItem = item.value;
      this.selectOpen = false;
      this.searchTerm = '';
      this.$refs.hiddenInput.value = item.value;
      this.$refs.hiddenInput.dispatchEvent(new Event('change'));
    },
    
    selectKeydown(event) {
      if (event.key === 'Escape') {
        this.selectOpen = false;
      }
    }
  }`}
  @click.away="selectOpen = false"
  @keydown="selectKeydown"
  class={`select-container ${className}`}
>
  <!-- Hidden input for form submission -->
  <input 
    x-ref="hiddenInput"
    type="hidden" 
    :name="name"
    :id="id"
    :value="selectedItem"
  />
  
  <!-- Select button -->
  <button 
    @click="selectOpen = !selectOpen"
    :disabled="disabled"
    class={getSelectClasses()}
    type="button"
  >
    <span class="select-label" x-text="selectedLabel"></span>
    <span class="select-icon">
      <svg class="select-chevron" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l4-4 4 4m0 6l-4 4-4-4"></path>
      </svg>
    </span>
  </button>
  
  <!-- Dropdown menu -->
  <div 
    x-show="selectOpen"
    x-transition:enter="transition ease-out duration-100"
    x-transition:enter-start="transform opacity-0 scale-95"
    x-transition:enter-end="transform opacity-100 scale-100"
    x-transition:leave="transition ease-in duration-75"
    x-transition:leave-start="transform opacity-100 scale-100"
    x-transition:leave-end="transform opacity-0 scale-95"
    class="select-dropdown"
    x-cloak
  >
    <!-- Search input -->
    {searchable && (
      <div class="select-search">
        <input 
          x-model="searchTerm"
          type="text"
          class="select-search-input"
          placeholder="Search options..."
        />
      </div>
    )}
    
    <!-- Options -->
    <template x-for="item in filteredItems" :key="item.value">
      <div 
        @click="selectItem(item)"
        :class="{ 
          'select-option--selected': selectedItem === item.value,
          'select-option--disabled': item.disabled
        }"
        class="select-option"
      >
        <span 
          :class="{ 'select-option-label--selected': selectedItem === item.value }"
          class="select-option-label"
          x-text="item.label"
        ></span>
        
        <!-- Selected checkmark -->
        <span 
          x-show="selectedItem === item.value"
          class="select-option-check"
        >
          <svg class="select-check-icon" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
          </svg>
        </span>
      </div>
    </template>
    
    <!-- No results -->
    <div x-show="filteredItems.length === 0" class="select-no-results">
      No options found
    </div>
  </div>
</div>