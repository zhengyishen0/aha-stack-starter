---
export interface Props {
  placement?: 'top' | 'bottom' | 'left' | 'right' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'left-start' | 'left-end' | 'right-start' | 'right-end';
  trigger?: 'click' | 'hover' | 'focus' | 'manual';
  context?: 'default' | 'tooltip' | 'dropdown';
  offset?: number;
  arrow?: boolean;
  delay?: number;
  hideDelay?: number;
  class?: string;
  popoverClass?: string;
  arrowClass?: string;
  disabled?: boolean;
  closeOnClickOutside?: boolean;
  closeOnEscape?: boolean;
  interactive?: boolean;
  maxWidth?: string;
  zIndex?: number;
}

const { 
  placement = 'bottom',
  trigger = 'click',
  context = 'default',
  offset = 8,
  arrow = true,
  delay = 0,
  hideDelay = 0,
  class: className = "",
  popoverClass = "",
  arrowClass = "",
  disabled = false,
  closeOnClickOutside = true,
  closeOnEscape = true,
  interactive = true,
  maxWidth = '320px',
  zIndex = 1000
} = Astro.props;

// Generate class names using true design system
const getComponentClasses = () => {
  const baseClass = 'popover';
  const contextClass = context !== 'default' ? `${context}-popover` : '';
  return `${baseClass} ${contextClass}`.trim();
};
---

<!-- 
Pine UI Popover Component

Usage:
<Popover placement="top" trigger="click" arrow={true}>
  <div slot="trigger">
    <Button>Click me</Button>
  </div>
  
  <div slot="content">
    <div class="popover-header">Popover Title</div>
    <div class="popover-body">This is the popover content.</div>
  </div>
</Popover>

<Popover placement="right-start" trigger="hover" delay={200}>
  <span slot="trigger" style="color: var(--color-primary); text-decoration: underline; cursor: help;">
    Hover for info
  </span>
  
  <div slot="content">
    <div class="popover-body">Helpful information appears here!</div>
  </div>
</Popover>

<Popover trigger="focus" placement="bottom-end" arrow={false}>
  <input slot="trigger" type="text" placeholder="Focus me" class="input" />
  
  <div slot="content">
    <div class="popover-body">
      <ul class="stack-sm">
        <li>• Suggestion 1</li>
        <li>• Suggestion 2</li>
        <li>• Suggestion 3</li>
      </ul>
    </div>
  </div>
</Popover>

Features:
- Smart positioning with 12 placement options
- Multiple trigger types (click, hover, focus, manual)
- Customizable arrow pointer
- Configurable delays for show/hide
- Auto-repositioning when near viewport edges
- Click outside and escape key to close
- Interactive content support
- Responsive positioning
- Alpine.js powered state management
- Accessible with proper ARIA attributes

Placement Options:
- top, bottom, left, right
- top-start, top-end
- bottom-start, bottom-end  
- left-start, left-end
- right-start, right-end

Trigger Types:
- click: Show/hide on click
- hover: Show on mouseenter, hide on mouseleave
- focus: Show on focus, hide on blur
- manual: Controlled programmatically
-->

<div 
  x-data="{
    popoverOpen: false,
    popoverPlacement: '${placement}',
    popoverTrigger: '${trigger}',
    popoverOffset: ${offset},
    popoverArrow: ${arrow},
    popoverDelay: ${delay},
    popoverHideDelay: ${hideDelay},
    popoverDisabled: ${disabled},
    popoverCloseOnClickOutside: ${closeOnClickOutside},
    popoverCloseOnEscape: ${closeOnEscape},
    popoverInteractive: ${interactive},
    popoverMaxWidth: '${maxWidth}',
    popoverZIndex: ${zIndex},
    popoverPosition: { top: 100, left: 100 },
    popoverArrowPosition: { top: 0, left: 0 },
    popoverActualPlacement: '${placement}',
    popoverShowTimeout: null,
    popoverHideTimeout: null,

    popoverShow() {
      if (this.popoverDisabled || this.popoverOpen) return;
      
      // Clear any existing timeouts
      if (this.popoverHideTimeout) {
        clearTimeout(this.popoverHideTimeout);
        this.popoverHideTimeout = null;
      }

      if (this.popoverDelay > 0) {
        this.popoverShowTimeout = setTimeout(() => {
          this.popoverOpen = true;
          this.$nextTick(() => {
            setTimeout(() => this.popoverCalculatePosition(), 10);
          });
        }, this.popoverDelay);
      } else {
        this.popoverOpen = true;
        this.$nextTick(() => {
          setTimeout(() => this.popoverCalculatePosition(), 10);
        });
      }
    },

    popoverHide() {
      // Clear any existing timeouts
      if (this.popoverShowTimeout) {
        clearTimeout(this.popoverShowTimeout);
        this.popoverShowTimeout = null;
      }

      if (this.popoverHideDelay > 0) {
        this.popoverHideTimeout = setTimeout(() => {
          this.popoverOpen = false;
        }, this.popoverHideDelay);
      } else {
        this.popoverOpen = false;
      }
    },

    popoverToggle() {
      if (this.popoverOpen) {
        this.popoverHide();
      } else {
        this.popoverShow();
      }
    },

    popoverCalculatePosition() {
      if (!this.popoverOpen) return;

      const trigger = this.$refs.popoverTrigger;
      const popover = this.$refs.popoverContent;
      const arrow = this.$refs.popoverArrow;

      if (!trigger || !popover) return;

      const triggerRect = trigger.getBoundingClientRect();
      const popoverRect = popover.getBoundingClientRect();
      const viewportWidth = window.innerWidth;
      const viewportHeight = window.innerHeight;
      const scrollX = window.pageXOffset;
      const scrollY = window.pageYOffset;

      let placement = this.popoverPlacement;
      let top = 0;
      let left = 0;
      let arrowTop = 0;
      let arrowLeft = 0;

      // Calculate initial position based on placement
      switch (placement) {
        case 'top':
          top = triggerRect.top + scrollY - popoverRect.height - this.popoverOffset;
          left = triggerRect.left + scrollX + (triggerRect.width / 2) - (popoverRect.width / 2);
          arrowTop = popoverRect.height;
          arrowLeft = (popoverRect.width / 2) - 6;
          break;
        case 'top-start':
          top = triggerRect.top + scrollY - popoverRect.height - this.popoverOffset;
          left = triggerRect.left + scrollX;
          arrowTop = popoverRect.height;
          arrowLeft = 12;
          break;
        case 'top-end':
          top = triggerRect.top + scrollY - popoverRect.height - this.popoverOffset;
          left = triggerRect.right + scrollX - popoverRect.width;
          arrowTop = popoverRect.height;
          arrowLeft = popoverRect.width - 24;
          break;
        case 'bottom':
          top = triggerRect.bottom + scrollY + this.popoverOffset;
          left = triggerRect.left + scrollX + (triggerRect.width / 2) - (popoverRect.width / 2);
          arrowTop = -6;
          arrowLeft = (popoverRect.width / 2) - 6;
          break;
        case 'bottom-start':
          top = triggerRect.bottom + scrollY + this.popoverOffset;
          left = triggerRect.left + scrollX;
          arrowTop = -6;
          arrowLeft = 12;
          break;
        case 'bottom-end':
          top = triggerRect.bottom + scrollY + this.popoverOffset;
          left = triggerRect.right + scrollX - popoverRect.width;
          arrowTop = -6;
          arrowLeft = popoverRect.width - 24;
          break;
        case 'left':
          top = triggerRect.top + scrollY + (triggerRect.height / 2) - (popoverRect.height / 2);
          left = triggerRect.left + scrollX - popoverRect.width - this.popoverOffset;
          arrowTop = (popoverRect.height / 2) - 6;
          arrowLeft = popoverRect.width;
          break;
        case 'left-start':
          top = triggerRect.top + scrollY;
          left = triggerRect.left + scrollX - popoverRect.width - this.popoverOffset;
          arrowTop = 12;
          arrowLeft = popoverRect.width;
          break;
        case 'left-end':
          top = triggerRect.bottom + scrollY - popoverRect.height;
          left = triggerRect.left + scrollX - popoverRect.width - this.popoverOffset;
          arrowTop = popoverRect.height - 24;
          arrowLeft = popoverRect.width;
          break;
        case 'right':
          top = triggerRect.top + scrollY + (triggerRect.height / 2) - (popoverRect.height / 2);
          left = triggerRect.right + scrollX + this.popoverOffset;
          arrowTop = (popoverRect.height / 2) - 6;
          arrowLeft = -6;
          break;
        case 'right-start':
          top = triggerRect.top + scrollY;
          left = triggerRect.right + scrollX + this.popoverOffset;
          arrowTop = 12;
          arrowLeft = -6;
          break;
        case 'right-end':
          top = triggerRect.bottom + scrollY - popoverRect.height;
          left = triggerRect.right + scrollX + this.popoverOffset;
          arrowTop = popoverRect.height - 24;
          arrowLeft = -6;
          break;
      }

      // Auto-adjust position if it goes outside viewport
      if (left < scrollX + 10) {
        left = scrollX + 10;
      } else if (left + popoverRect.width > scrollX + viewportWidth - 10) {
        left = scrollX + viewportWidth - popoverRect.width - 10;
      }

      if (top < scrollY + 10) {
        // If top placement doesn't fit, try bottom
        if (placement.startsWith('top')) {
          top = triggerRect.bottom + scrollY + this.popoverOffset;
          arrowTop = -6;
          placement = placement.replace('top', 'bottom');
        } else {
          top = scrollY + 10;
        }
      } else if (top + popoverRect.height > scrollY + viewportHeight - 10) {
        // If bottom placement doesn't fit, try top
        if (placement.startsWith('bottom')) {
          top = triggerRect.top + scrollY - popoverRect.height - this.popoverOffset;
          arrowTop = popoverRect.height;
          placement = placement.replace('bottom', 'top');
        } else {
          top = scrollY + viewportHeight - popoverRect.height - 10;
        }
      }

      // Force reactive update
      this.popoverPosition = { top: top, left: left };
      this.popoverArrowPosition = { top: arrowTop, left: arrowLeft };
      this.popoverActualPlacement = placement;
    },

    popoverGetArrowClasses() {
      return 'popover-arrow';
    },

    init() {
      // Handle resize events
      window.addEventListener('resize', () => {
        if (this.popoverOpen) {
          this.$nextTick(() => this.popoverCalculatePosition());
        }
      });

      // Handle scroll events
      window.addEventListener('scroll', () => {
        if (this.popoverOpen) {
          this.$nextTick(() => this.popoverCalculatePosition());
        }
      });
    }
  }"
  x-init="init()"
  @keydown.escape.window="popoverCloseOnEscape && popoverOpen && popoverHide()"
  class={`${getComponentClasses()} ${className}`}
>
  <!-- Trigger Element -->
  <div 
    x-ref="popoverTrigger"
    @click="popoverTrigger === 'click' && popoverToggle()"
    @mouseenter="popoverTrigger === 'hover' && popoverShow()"
    @mouseleave="popoverTrigger === 'hover' && popoverHide()"
    @focus="popoverTrigger === 'focus' && popoverShow()"
    @blur="popoverTrigger === 'focus' && popoverHide()"
    class="popover-trigger"
  >
    <slot name="trigger" />
  </div>

  <!-- Popover Content -->
  <template x-teleport="body">
    <div 
      x-show="popoverOpen"
      x-ref="popoverContent"
      @click.away="popoverCloseOnClickOutside && popoverHide()"
      @mouseenter="popoverTrigger === 'hover' && popoverInteractive && (popoverHideTimeout && clearTimeout(popoverHideTimeout))"
      @mouseleave="popoverTrigger === 'hover' && popoverInteractive && popoverHide()"
      x-transition:enter="transition ease-out duration-200"
      x-transition:enter-start="opacity-0 scale-95"
      x-transition:enter-end="opacity-100 scale-100"
      x-transition:leave="transition ease-in duration-150"
      x-transition:leave-start="opacity-100 scale-100"
      x-transition:leave-end="opacity-0 scale-95"
      class={`popover-content ${popoverClass}`}
      :style="{
        top: popoverPosition.top + 'px', 
        left: popoverPosition.left + 'px', 
        maxWidth: popoverMaxWidth, 
        zIndex: popoverZIndex
      }"
      :data-placement="popoverActualPlacement"
      :data-trigger="popoverTrigger"
      x-cloak
      role="tooltip"
      :aria-hidden="!popoverOpen"
    >
      <!-- Arrow -->
      <div 
        x-show="popoverArrow"
        x-ref="popoverArrow"
        :class="popoverGetArrowClasses()"
        class={arrowClass}
        :style="{
          top: popoverArrowPosition.top + 'px', 
          left: popoverArrowPosition.left + 'px'
        }"
      ></div>

      <!-- Content -->
      <div class="popover-body">
        <slot name="content" />
      </div>
    </div>
  </template>
</div>